// Generated by CoffeeScript 1.12.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _skill.AidSkill = (function(superClass) {
    extend(AidSkill, superClass);

    function AidSkill() {
      AidSkill.__super__.constructor.call(this);
      this.overlayType = 'AID';
      this.controlState = _cs.chapterui.AidSkill;
    }

    AidSkill.prototype.getDelta = function(user) {
      return {};
    };

    AidSkill.prototype.doEffect = function(target) {};

    return AidSkill;

  })(_skill.Skill);

  _cs.chapterui.AidSkill = (function(superClass) {
    extend(AidSkill, superClass);

    function AidSkill() {
      return AidSkill.__super__.constructor.apply(this, arguments);
    }

    AidSkill.prototype.f = function() {
      var action, afterAction, delta, encounter, result, target, user;
      result = this.getUserTarget();
      if (result === false) {
        return;
      } else {
        user = result.user;
        target = result.target;
      }
      AidSkill.__super__.f.call(this);
      delta = this.skill.getDelta(user);
      afterAction = (function(_this) {
        return function() {
          _this.skill.doEffect(target);
          return _this.skillDone();
        };
      })(this);
      if (user === target) {
        action = new _enc.UnitAction(this.ui, user);
        return action.doAction(this.skill, afterAction, delta);
      } else {
        encounter = new _enc.AidEncounter(this.ui, user, target);
        return encounter.doEncounter(afterAction, this.skill, delta);
      }
    };

    return AidSkill;

  })(_cs.chapterui.Skill);

  _skill.Defend = (function(superClass) {
    extend(Defend, superClass);

    function Defend() {
      Defend.__super__.constructor.call(this);
      this.name = 'Defend';
      this.imageName = 'defend';
      this.desc = 'During the next enemy turn, ' + 'damage received is halved, but the unit cannot counterattack.';
      this.mp = 2;
      this.range = new Range(0);
    }

    Defend.prototype.doEffect = function(target) {
      return target.addStatus(new _status.Defend());
    };

    return Defend;

  })(_skill.AidSkill);

  _skill.HealSkill = (function(superClass) {
    extend(HealSkill, superClass);

    function HealSkill() {
      return HealSkill.__super__.constructor.apply(this, arguments);
    }

    HealSkill.prototype.getDelta = function(user) {
      return {
        hp: user.mag + this.might
      };
    };

    HealSkill.prototype.isValidTarget = function(target) {
      return target.hp < target.maxHp;
    };

    return HealSkill;

  })(_skill.AidSkill);

  _skill.FirstAid = (function(superClass) {
    extend(FirstAid, superClass);

    function FirstAid() {
      FirstAid.__super__.constructor.call(this);
      this.name = 'First aid';
      this.imageName = 'first_aid';
      this.type = new _skill.type.Holy();
      this.desc = 'Basic healing skill.';
      this.mp = 3;
      this.might = 18;
      this.range = new Range(0, 1);
    }

    return FirstAid;

  })(_skill.HealSkill);

  _skill.Heal = (function(superClass) {
    extend(Heal, superClass);

    function Heal() {
      Heal.__super__.constructor.call(this);
      this.name = 'Heal';
      this.imageName = 'heal';
      this.type = new _skill.type.Holy();
      this.desc = 'Healing magic.';
      this.mp = 1;
      this.might = 22;
      this.range = new Range(0, 1);
    }

    Heal.prototype.getExp = function() {
      return .1 * ui.expMultiplier;
    };

    return Heal;

  })(_skill.HealSkill);

  _skill.Temper = (function(superClass) {
    extend(Temper, superClass);

    function Temper() {
      Temper.__super__.constructor.call(this);
      this.name = 'Temper';
      this.imageName = 'temper';
      this.desc = 'Temporarily buff an ally\'s strength and magic.';
      this.mp = 4;
      this.range = new Range(0, 1);
    }

    Temper.prototype.doEffect = function(target) {
      target.addStatus(new _status.Buff('str', 3));
      return target.addStatus(new _status.Buff('mag', 3));
    };

    return Temper;

  })(_skill.AidSkill);

  _skill.Protect = (function(superClass) {
    extend(Protect, superClass);

    function Protect() {
      Protect.__super__.constructor.call(this);
      this.name = 'Protect';
      this.imageName = 'protect';
      this.desc = 'Temporarily buff an ally\'s defence and resistance.';
      this.mp = 4;
      this.range = new Range(0, 1);
    }

    Protect.prototype.doEffect = function(target) {
      target.addStatus(new _status.Buff('def', 3));
      return target.addStatus(new _status.Buff('res', 3));
    };

    return Protect;

  })(_skill.AidSkill);

  _skill.ThrowingKnives = (function(superClass) {
    extend(ThrowingKnives, superClass);

    function ThrowingKnives() {
      ThrowingKnives.__super__.constructor.call(this);
      this.name = 'Throwing Knives';
      this.imageName = 'throwing_knives';
      this.desc = 'For the next 3 enemy turns, Arrow counterattacks with throwing knives, ' + 'which have a range of 1-2. Throwing knives have the same accuracy and might as iron bows.';
      this.mp = 12;
      this.range = new Range(0);
    }

    ThrowingKnives.prototype.doEffect = function(target) {
      return target.addStatus(new _status.ThrowingKnives());
    };

    return ThrowingKnives;

  })(_skill.AidSkill);

}).call(this);
