// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window._skill = {};

  _skill.type = {};

  _skill.type.SkillType = (function() {
    function SkillType() {}

    SkillType.prototype.getEl = function() {
      var imagePath;
      imagePath = "images/items/" + this.image + ".png";
      return $('<img />').attr('src', imagePath);
    };

    return SkillType;

  })();

  _skill.type.None = (function(_super) {
    __extends(None, _super);

    function None() {
      return None.__super__.constructor.apply(this, arguments);
    }

    return None;

  })(_skill.type.SkillType);

  _skill.type.Magic = (function(_super) {
    __extends(Magic, _super);

    function Magic() {
      return Magic.__super__.constructor.apply(this, arguments);
    }

    return Magic;

  })(_skill.type.SkillType);

  _skill.type.Holy = (function(_super) {
    __extends(Holy, _super);

    function Holy() {
      return Holy.__super__.constructor.apply(this, arguments);
    }

    Holy.prototype.image = 'aquabolt';

    return Holy;

  })(_skill.type.Magic);

  _skill.type.Dark = (function(_super) {
    __extends(Dark, _super);

    function Dark() {
      return Dark.__super__.constructor.apply(this, arguments);
    }

    Dark.prototype.image = 'fire';

    return Dark;

  })(_skill.type.Magic);

  _skill.type.Physical = (function(_super) {
    __extends(Physical, _super);

    function Physical() {
      return Physical.__super__.constructor.apply(this, arguments);
    }

    return Physical;

  })(_skill.type.SkillType);

  _skill.type.Sword = (function(_super) {
    __extends(Sword, _super);

    function Sword() {
      return Sword.__super__.constructor.apply(this, arguments);
    }

    Sword.prototype.image = 'iron_sword';

    return Sword;

  })(_skill.type.Physical);

  _skill.type.Lance = (function(_super) {
    __extends(Lance, _super);

    function Lance() {
      return Lance.__super__.constructor.apply(this, arguments);
    }

    Lance.prototype.image = 'iron_lance';

    return Lance;

  })(_skill.type.Physical);

  _skill.type.Axe = (function(_super) {
    __extends(Axe, _super);

    function Axe() {
      return Axe.__super__.constructor.apply(this, arguments);
    }

    Axe.prototype.image = 'iron_axe';

    return Axe;

  })(_skill.type.Physical);

  _skill.type.Bow = (function(_super) {
    __extends(Bow, _super);

    function Bow() {
      return Bow.__super__.constructor.apply(this, arguments);
    }

    Bow.prototype.image = 'iron_bow';

    return Bow;

  })(_skill.type.Physical);

  _skill.Skill = (function() {
    function Skill() {
      this.type = new _skill.type.None();
      this.might = null;
      this.mp = 0;
    }

    Skill.prototype.getExp = function() {
      return this.mp * .02;
    };

    Skill.prototype.getImagePath = function() {
      return "images/skills/" + this.imageName + ".png";
    };

    Skill.prototype.getMessageEl = function() {
      var img, message, span;
      message = $('<div></div>').addClass('action-message');
      img = $('<img/>').attr('src', this.getImagePath());
      img.appendTo(message);
      span = $('<span></span>').text(this.name + '!');
      span.appendTo(message);
      return message;
    };

    Skill.prototype.getControlState = function(ui, playerTurn) {
      return new this.controlState(ui, playerTurn, this);
    };

    Skill.prototype.isValidTarget = function(target) {
      return true;
    };

    return Skill;

  })();

  _cs.cui.Skill = (function(_super) {
    __extends(Skill, _super);

    function Skill(ui, playerTurn, skill) {
      this.ui = ui;
      this.playerTurn = playerTurn;
      this.skill = skill;
      this.skillDone = __bind(this.skillDone, this);
    }

    Skill.prototype.getUserTarget = function() {
      var dist, target, user;
      user = this.playerTurn.selectedUnit;
      target = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
      if (!((target != null) && this.skill.isValidTarget(target))) {
        return false;
      }
      dist = user.pos.distance(target.pos);
      if (this.skill.range.contains(dist)) {
        return {
          user: user,
          target: target
        };
      }
      return false;
    };

    Skill.prototype.f = function() {
      this.ui.cursor.visible = false;
      this.ui.unitInfoBox.hide();
      this.ui.terrainBox.hide();
      this.ui.skillInfoBox.hide();
      this.ui.chapter.map.clearOverlay();
      return this.ui.controlState = new _cs.cui.Chapter(this.ui);
    };

    Skill.prototype.d = function() {
      this.ui.cursor.visible = false;
      this.ui.cursor.pos = this.playerTurn.selectedUnit.pos.clone();
      this.ui.unitInfoBox.update();
      this.ui.battleStatsPanel.hide();
      this.playerTurn.selectedUnit.inventory.refresh();
      return this.playerTurn.handleSkill(false);
    };

    Skill.prototype.skillDone = function(exp) {
      var afterExpAdd;
      if (exp == null) {
        exp = null;
      }
      afterExpAdd = (function(_this) {
        return function() {
          _this.ui.controlState = new _cs.cui.Map(_this.ui);
          _this.ui.cursor.visible = true;
          _this.ui.unitInfoBox.update();
          _this.ui.terrainBox.show();
          _this.playerTurn.selectedUnit.setDone();
          return _this.playerTurn.selectedUnit = null;
        };
      })(this);
      if (exp == null) {
        exp = this.skill.getExp();
      }
      return _turn.addExp(this.ui, afterExpAdd, this.playerTurn.selectedUnit, exp);
    };

    return Skill;

  })(_cs.cui.MapTarget);

}).call(this);
