// Generated by CoffeeScript 1.12.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window._team = {};

  _team.Team = (function() {
    function Team(units1) {
      var i, len, ref, unit;
      this.units = units1;
      ref = this.units;
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        unit.setTeam(this);
      }
    }

    Team.prototype.addUnit = function(unit) {
      this.units.push(unit);
      return unit.setTeam(this);
    };

    return Team;

  })();

  _team.PlayerTeam = (function(superClass) {
    extend(PlayerTeam, superClass);

    function PlayerTeam(units1) {
      var i, len, ref, unit;
      this.units = units1;
      ref = this.units;
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        this.initPlayerUnit(unit);
      }
      PlayerTeam.__super__.constructor.call(this, this.units);
    }

    PlayerTeam.prototype.addUnit = function(unit) {
      PlayerTeam.__super__.addUnit.call(this, unit);
      return this.initPlayerUnit(unit);
    };

    PlayerTeam.prototype.initPlayerUnit = function(unit) {
      return unit.allSkills = [
        {
          level: 1,
          skill: new _skill.Defend()
        }
      ].concat(unit.allSkills);
    };

    PlayerTeam.prototype.pickle = function() {
      var array, i, len, ref, unit;
      array = [];
      ref = this.units;
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        array.push(unit.pickle());
      }
      return array;
    };

    PlayerTeam.unpickle = function(pickled) {
      var i, len, pickledUnit, unit, units;
      if (!pickled instanceof Array) {
        return null;
      }
      units = [];
      for (i = 0, len = pickled.length; i < len; i++) {
        pickledUnit = pickled[i];
        unit = _unit.Unit.unpickle(pickledUnit);
        if (unit === null) {
          return null;
        } else {
          units.push(unit);
        }
      }
      return new _team.PlayerTeam(units);
    };

    return PlayerTeam;

  })(_team.Team);

  _team.EnemyTeam = (function(superClass) {
    extend(EnemyTeam, superClass);

    EnemyTeam.prototype.insigniaImagePath = 'images/bandit_insignia.png';

    function EnemyTeam(units1, attr) {
      var dld, i, item, j, k, len, len1, len2, ref, ref1, ref2, unit;
      this.units = units1;
      if (attr == null) {
        attr = {};
      }
      if ('reinforcements' in attr) {
        this.reinforcements = attr.reinforcements;
      } else {
        this.reinforcements = [];
      }
      if (!('defaultAiType' in attr)) {
        attr.defaultAiType = _unit.aiType.normal;
      }
      ref = this.reinforcements;
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        unit.setTeam(this);
      }
      ref1 = this.units.concat(this.reinforcements);
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        unit = ref1[j];
        if (!('aiType' in unit)) {
          unit.aiType = attr.defaultAiType;
        }
        if (!('aiOptions' in unit)) {
          unit.aiOptions = {};
        }
        if ('defaultName' in attr && (unit.name == null)) {
          unit.setName(attr.defaultName);
        }
        if ('defaultLevel' in attr && (unit.level == null)) {
          if (unit.dld != null) {
            dld = unit.dld;
          } else {
            dld = 0;
          }
          unit.level = attr.defaultLevel + dld;
          delete unit.dld;
        }
        ref2 = unit.inventory.it();
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          item = ref2[k];
          item.uses = null;
        }
        unit.calcStatsInitial();
      }
      EnemyTeam.__super__.constructor.call(this, this.units);
    }

    return EnemyTeam;

  })(_team.Team);

}).call(this);
