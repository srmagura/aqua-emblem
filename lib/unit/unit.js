// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window._unit = {};

  _unit.aiType = {
    normal: 0,
    halt: 1,
    aggressive: 2
  };

  _unit.LUNGE_STATUS = {
    NOT_LUNGING: 0,
    FORWARD: 1,
    REVERSE: 2
  };

  _unit.Unit = (function() {
    function Unit(attr) {
      this.updateLunge = __bind(this.updateLunge, this);
      var key, value;
      for (key in attr) {
        value = attr[key];
        this[key] = value;
      }
      if (this.name != null) {
        this.setName(this.name);
      }
      this.baseStats = {};
      this.statuses = [];
      this.calcStatsInitial();
      if (!('picture' in this)) {
        this.picture = false;
      }
      if (!('boss' in this)) {
        this.boss = false;
      }
      if (!('exp' in this)) {
        this.exp = 0;
      }
      if (!('items' in this)) {
        this.items = [];
      }
      this.inventory = new _unit.Inventory(this, this.items);
      delete this.items;
      this.lungeStatus = _unit.LUNGE_STATUS.NOT_LUNGING;
      this.offset = new Position(0, 0);
    }

    Unit.prototype.onNewTurn = function() {
      var i, status, toRemove, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.statuses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        status = _ref[_i];
        status.newTurn(this);
      }
      while (true) {
        toRemove = null;
        _ref1 = this.statuses;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          status = _ref1[i];
          if (status.turns === 0) {
            toRemove = i;
            break;
          }
        }
        if (toRemove != null) {
          this.statuses.splice(toRemove, 1);
        } else {
          break;
        }
      }
      this.updateStats();
      return this.inventory.refresh();
    };

    Unit.prototype.onEnemyTurn = function() {
      var status, _i, _len, _ref, _results;
      _ref = this.statuses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        status = _ref[_i];
        _results.push(status.onEnemyTurn(this));
      }
      return _results;
    };

    Unit.prototype.addStatus = function(status) {
      var doAdd, i, other, toRemove, _i, _j, _len, _len1, _ref;
      doAdd = true;
      toRemove = [];
      _ref = this.statuses;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        other = _ref[i];
        if (other instanceof _status.Buff && other.stat === status.stat) {
          if (other.value > status.value) {
            doAdd = false;
          } else {
            toRemove.push(i);
          }
        } else if (other.constructor === status.constructor && status.replaceOther) {
          toRemove.push(i);
        }
      }
      for (_j = 0, _len1 = toRemove.length; _j < _len1; _j++) {
        i = toRemove[_j];
        this.statuses.splice(i, 1);
      }
      if (doAdd) {
        this.statuses.push(status);
      }
      return this.updateStats();
    };

    Unit.prototype.hasStatus = function(cls) {
      var status, _i, _len, _ref;
      _ref = this.statuses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        status = _ref[_i];
        if (status instanceof cls) {
          return true;
        }
      }
      return false;
    };

    Unit.prototype.getStatus = function(cls) {
      var status, _i, _len, _ref;
      _ref = this.statuses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        status = _ref[_i];
        if (status instanceof cls) {
          return status;
        }
      }
    };

    Unit.prototype.canUseSkill = function(skl) {
      return this.mp >= skl.mp;
    };

    Unit.prototype.setName = function(name) {
      this.name = name;
      return this.id = this.name.toLowerCase().replace(' ', '-');
    };

    Unit.prototype.setEquipped = function(item) {
      return this.inventory.setEquipped(item);
    };

    Unit.prototype.fillInStartStats = function(startStats) {
      var stat, value, _results;
      if (this.startStats == null) {
        this.startStats = {};
      }
      _results = [];
      for (stat in startStats) {
        value = startStats[stat];
        if (!(stat in this.startStats)) {
          _results.push(this.startStats[stat] = value);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Unit.prototype.calcStatsInitial = function() {
      this.calcStats();
      this.hp = this.maxHp;
      if (this.maxMp != null) {
        this.mp = Math.round(this.maxMp / 2);
      }
      this.statuses = [];
      return this.done = false;
    };

    Unit.prototype.calcStats = function(dryRun) {
      var increment, obj, rounded, stat, value, _i, _len, _ref, _ref1;
      if (dryRun == null) {
        dryRun = false;
      }
      increment = {};
      _ref = this.startStats;
      for (stat in _ref) {
        value = _ref[stat];
        if (stat in this.growthRates) {
          value += this.growthRates[stat] * (this.level - 1);
        }
        rounded = Math.round(value);
        if (rounded > this.baseStats[stat]) {
          increment[stat] = 1;
        }
        if (!dryRun) {
          this.baseStats[stat] = rounded;
          this.updateStat(stat);
        }
      }
      if (this.allSkills != null) {
        this.skills = [];
        _ref1 = this.allSkills;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          obj = _ref1[_i];
          if (this.level >= obj.level) {
            this.skills.push(obj.skill);
          }
          if (this.level === obj.level) {
            increment.newSkill = obj.skill;
          }
        }
      }
      return increment;
    };

    Unit.prototype.updateStats = function() {
      var stat, _results;
      _results = [];
      for (stat in this.baseStats) {
        _results.push(this.updateStat(stat));
      }
      return _results;
    };

    Unit.prototype.updateStat = function(stat) {
      var status, value, _i, _len, _ref;
      value = this.baseStats[stat];
      _ref = this.statuses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        status = _ref[_i];
        if (status instanceof _status.Buff && status.stat === stat) {
          value += status.value;
        }
      }
      return this[stat] = value;
    };

    Unit.prototype.addHp = function(toAdd) {
      var newHp;
      newHp = this.hp + toAdd;
      if (newHp > this.maxHp) {
        return this.hp = this.maxHp;
      } else if (newHp < 0) {
        return this.hp = 0;
      } else {
        return this.hp = newHp;
      }
    };

    Unit.prototype.addExp = function(toAdd) {
      var newExp;
      newExp = this.exp + toAdd;
      if (newExp >= 1) {
        this.exp = newExp - 1;
        this.level++;
        return this.calcStats(true);
      } else {
        this.exp = newExp;
        return null;
      }
    };

    Unit.prototype.doIncrement = function(increment) {
      var stat;
      for (stat in increment) {
        this.baseStats[stat]++;
      }
      return this.updateStats();
    };

    Unit.prototype.canUse = function(item) {
      return this.canWield(item);
    };

    Unit.prototype.canWield = function(item) {
      var cls, _i, _len, _ref;
      if (!(item instanceof _item.Weapon)) {
        return false;
      }
      _ref = this.wield;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cls = _ref[_i];
        if (item instanceof cls) {
          return true;
        }
      }
      return false;
    };

    Unit.prototype.setTeam = function(team) {
      var dir, filename, prefix;
      this.team = team;
      prefix = 'images/dango/';
      filename = this.uclassName.toLowerCase() + '.png';
      if (this.team instanceof _team.PlayerTeam) {
        dir = 'player/';
      } else {
        dir = 'enemy/';
      }
      this.imageObjects = {};
      this.imageObjects.normal = new Image();
      this.imageObjects.normal.src = prefix + dir + filename;
      this.imageObjects.done = new Image();
      this.imageObjects.done.src = prefix + 'done/' + filename;
      if (this.boss) {
        this.imageObjects.crown = new Image();
        return this.imageObjects.crown.src = 'images/crown.png';
      }
    };

    Unit.prototype.setDone = function() {
      this.done = true;
      return this.ui.chapter.checkAllDone();
    };

    Unit.prototype.followPath = function(path, pathFollowCallback) {
      this.path = path;
      this.pathFollowCallback = pathFollowCallback;
      this.followingPath = true;
      return this.pathNext();
    };

    Unit.prototype.pathNext = function() {
      this.offset = new Position(0, 0);
      this.pos = this.path.shift().clone();
      if (this.path.length !== 0) {
        this.direction = this.path[0].subtract(this.pos);
        return this.movementSpeed = .4;
      } else {
        this.direction = null;
        this.followingPath = false;
        return this.pathFollowCallback();
      }
    };

    Unit.prototype.calcCombatStats = function() {
      var terrain;
      if (this.ui == null) {
        return;
      }
      if (this.equipped == null) {
        this.attackSpeed = this.speed;
      } else {
        this.attackSpeed = this.speed - this.equipped.weight + 5;
        if (this.attackSpeed < 0) {
          this.attackSpeed = 0;
        }
      }
      if (this.equipped != null) {
        this.hit = this.equipped.hit + 2 * this.skill + this.luck / 2;
        this.atk = this.str + this.equipped.might;
        this.crit = this.equipped.crit + this.skill / 2;
      } else {
        this.hit = null;
        this.atk = null;
        this.crit = null;
      }
      terrain = this.ui.chapter.map.getTerrain(this.pos);
      this.evade = this.attackSpeed * 2 + this.luck + terrain.evade;
      this.critEvade = this.luck;
      return this.defResBonus = terrain.def;
    };

    Unit.prototype.updateLunge = function() {
      var dist;
      if (this.lungeStatus === _unit.LUNGE_STATUS.NOT_LUNGING) {
        return;
      }
      dist = this.offset.norm();
      if (this.lungeStatus === _unit.LUNGE_STATUS.FORWARD && dist > 11) {
        this.direction = this.direction.scale(-1);
        return this.lungeStatus++;
      } else if (this.lungeStatus === _unit.LUNGE_STATUS.REVERSE && this.direction.dot(this.offset) > 0) {
        this.direction = null;
        this.offset = new Position(0, 0);
        return this.lungeStatus = 0;
      }
    };

    Unit.prototype.render = function(ui, ctx) {
      var image, offset, s;
      if (this.done) {
        image = this.imageObjects.done;
      } else {
        image = this.imageObjects.normal;
      }
      offset = this.pos.scale(ui.tw).add(this.offset).subtract(ui.origin);
      ctx.drawImage(image, offset.j + 1, offset.i + 2);
      if (this.boss) {
        ctx.drawImage(this.imageObjects.crown, offset.j + 12, offset.i + 3);
      }
      if (this.statuses.length !== 0) {
        ctx.beginPath();
        s = 28;
        ctx.arc(offset.j + s, offset.i + s, 4, 0, 2 * Math.PI, false);
        ctx.fillStyle = 'orange';
        ctx.strokeStyle = '#440000';
        ctx.stroke();
        return ctx.fill();
      }
    };

    Unit.prototype.getImagePath = function() {
      return 'images/characters/' + this.name.toLowerCase() + '.png';
    };

    Unit.prototype.pickle = function() {
      return {
        constructor: _util.getFunctionName(this.constructor),
        level: this.level,
        exp: this.exp,
        inventory: this.inventory.pickle()
      };
    };

    Unit.unpickle = function(pickled) {
      var constructor, unit;
      if (pickled.constructor in _unit.special) {
        constructor = _unit.special[pickled.constructor];
        unit = new constructor();
      } else {
        return null;
      }
      if ('level' in pickled) {
        unit.level = pickled.level;
      } else {
        return null;
      }
      if ('exp' in pickled) {
        unit.exp = pickled.exp;
      } else {
        return null;
      }
      unit.inventory = _unit.Inventory.unpickle(pickled.inventory, unit);
      if (unit.inventory == null) {
        return null;
      }
      return unit;
    };

    return Unit;

  })();

}).call(this);
