// Generated by CoffeeScript 1.7.1
(function() {
  _unit.Inventory = (function() {
    Inventory.MAX_SIZE = 5;

    function Inventory(unit, items) {
      this.unit = unit;
      this.items = items;
      this.refresh();
    }

    Inventory.prototype.set = function(i, item) {
      this.items[i] = item;
      return this.refresh();
    };

    Inventory.prototype.push = function(item) {
      return this.items.push(item);
    };

    Inventory.prototype.get = function(i) {
      return this.items[i];
    };

    Inventory.prototype.it = function() {
      return this.items.slice(0, this.items.length);
    };

    Inventory.prototype.size = function() {
      return this.items.length;
    };

    Inventory.prototype.remove = function(arg) {
      var i;
      if (arg instanceof _item.Item) {
        i = this.items.indexOf(arg);
      } else {
        i = arg;
      }
      this.items.splice(i, 1);
      return this.refresh();
    };

    Inventory.prototype.setEquipped = function(item) {
      var i;
      i = this.items.indexOf(item);
      this.items.splice(i, 1);
      this.items = [item].concat(this.items);
      return this.refresh();
    };

    Inventory.prototype.refresh = function() {
      var equippedSet, item, totalRange, _i, _len, _ref;
      totalRange = new Range();
      equippedSet = false;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (this.unit.canWield(item)) {
          if (!equippedSet) {
            this.unit.equipped = item;
            equippedSet = true;
          }
          totalRange = totalRange.union(item.range);
        }
      }
      this.unit.totalRange = totalRange;
      if (!equippedSet) {
        this.unit.equipped = null;
      }
      return this.unit.calcCombatStats();
    };

    Inventory.prototype.pickle = function() {
      var array, item, _i, _len, _ref;
      array = [];
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        array.push(item.pickle());
      }
      return array;
    };

    Inventory.unpickle = function(pickled, unit) {
      var item, items, pickledItem, _i, _len;
      if (pickled == null) {
        return null;
      }
      items = [];
      for (_i = 0, _len = pickled.length; _i < _len; _i++) {
        pickledItem = pickled[_i];
        item = _item.Item.unpickle(pickledItem);
        if (item === null) {
          return null;
        } else {
          items.push(item);
        }
      }
      return new _unit.Inventory(unit, items);
    };

    return Inventory;

  })();

}).call(this);
