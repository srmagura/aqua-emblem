// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window._sui = {};

  _cs.sui = {};

  _sui.StartUI = (function(_super) {
    __extends(StartUI, _super);

    function StartUI(file) {
      this.file = file;
      this.dialogOnClose = __bind(this.dialogOnClose, this);
      StartUI.__super__.constructor.call(this);
      this.vn = $('.vn-wrapper');
      this.controlState = new _cs.ControlState(this);
      this.wrapper = this.vn.find('.start-menu-container');
      this.itemContainer = this.wrapper.find('.items');
      this.messageDiv = this.wrapper.find('.message');
      this.saveBackupDialog = this.wrapper.find('.save-backup');
      this.uploadDialog = this.wrapper.find('.upload-backup');
      this.messages = {
        'chapterComplete': 'Chapter complete! Game saved.'
      };
      this.dialogOptions = {
        modal: true,
        width: 400,
        close: this.dialogOnClose
      };
    }

    StartUI.prototype.init = function(options) {
      var json, next;
      if (options == null) {
        options = {};
      }
      this.itemContainer.html('');
      this.wrapper.show();
      _vn.setBackgroundImage(this.wrapper, 'start');
      json = localStorage.getItem('file');
      if ((json != null) && !this.file) {
        this.file = _file.File.unpickle(json);
      }
      next = (function(_this) {
        return function() {
          if (_this.file != null) {
            _this.initMenu(_sui.MenuMain);
          } else {
            _this.initMenu(_sui.MenuNoData);
          }
          if ('message' in options) {
            return _this.messageDiv.html(options.message).show();
          }
        };
      })(this);
      if ('fade' in options && options.fade) {
        return this.vn.fadeIn(1000, next);
      } else {
        this.vn.show();
        return next();
      }
    };

    StartUI.prototype.initMenu = function(menuCls) {
      this.messageDiv.hide();
      this.itemContainer.html('');
      this.menu = new menuCls(this, this.itemContainer);
      this.menu.init();
      return this.controlState = new _cs.sui.Menu(this, this.menu);
    };

    StartUI.prototype.dialogOnClose = function() {
      return this.controlState = this.prevControlState;
    };

    StartUI.prototype.destroy = function() {
      this.wrapper.hide();
      return this.vn.hide();
    };

    return StartUI;

  })(UI);

  _sui.Menu = (function() {
    function Menu(ui, menu) {
      this.ui = ui;
      this.menu = menu;
    }

    Menu.prototype.getMenuEl = function(mainText, subtext) {
      var el;
      if (subtext == null) {
        subtext = '';
      }
      el = $('<div></div>').addClass('menu-item');
      $('<div></div>').addClass('main-text').html(mainText).appendTo(el);
      $('<div></div>').addClass('subtext').html(subtext).appendTo(el);
      return el;
    };

    Menu.prototype.selectFirst = function() {
      return this.menu.children().first().addClass('selected');
    };

    Menu.prototype.getSelected = function() {
      return this.menu.find('.selected');
    };

    Menu.prototype.back = function() {};

    return Menu;

  })();

  _cs.sui.Menu = (function(_super) {
    __extends(Menu, _super);

    function Menu() {
      return Menu.__super__.constructor.apply(this, arguments);
    }

    Menu.prototype.f = function() {
      return this.menuObj.getSelected().data('handler')();
    };

    Menu.prototype.d = function() {
      return this.menuObj.back();
    };

    return Menu;

  })(_cs.Menu);

}).call(this);
