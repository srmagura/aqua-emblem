// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _sui.MenuNoData = (function(_super) {
    __extends(MenuNoData, _super);

    function MenuNoData() {
      this.doUpload = __bind(this.doUpload, this);
      this.handleUpload = __bind(this.handleUpload, this);
      this.handleNewGame = __bind(this.handleNewGame, this);
      return MenuNoData.__super__.constructor.apply(this, arguments);
    }

    MenuNoData.prototype.init = function() {
      this.ui.messageDiv.text('Press F to continue').show();
      this.getMenuEl('New game').appendTo(this.menu).data('handler', this.handleNewGame);
      this.getMenuEl('Upload backup').appendTo(this.menu).data('handler', this.handleUpload);
      this.selectFirst();
      return this.controlState = new _cs.sui.Menu(this, this.menu);
    };

    MenuNoData.prototype.handleNewGame = function() {
      return this.ui.initMenu(_sui.MenuDifficulty);
    };

    MenuNoData.prototype.handleUpload = function() {
      var dia, options;
      options = $.extend(this.ui.dialogOptions, {
        buttons: [
          {
            text: 'Upload',
            click: this.doUpload
          }
        ]
      });
      dia = this.ui.uploadDialog;
      dia.dialog(options);
      this.ui.prevControlState = this.ui.controlState;
      this.ui.controlState = new _cs.ControlState(this.ui);
      dia.find('.error-div').hide();
      return setTimeout((function() {
        return dia.find('textarea').val('');
      }), 0);
    };

    MenuNoData.prototype.doUpload = function() {
      var invalid, str, unpickled;
      invalid = false;
      str = this.ui.uploadDialog.find('textarea').val();
      unpickled = _file.File.unpickle(str);
      if (unpickled === null) {
        invalid = true;
      }
      if (invalid) {
        this.ui.uploadDialog.find('.error').text('Could not parse the save file.');
        return this.ui.uploadDialog.find('.error-div').show();
      } else {
        this.ui.uploadDialog.dialog('close');
        this.ui.file = unpickled;
        localStorage.setItem('file', this.ui.file.pickle());
        return this.ui.initMenu(_sui.MenuMain);
      }
    };

    return MenuNoData;

  })(_sui.Menu);

  _sui.MenuDifficulty = (function(_super) {
    __extends(MenuDifficulty, _super);

    function MenuDifficulty() {
      this.handler = __bind(this.handler, this);
      return MenuDifficulty.__super__.constructor.apply(this, arguments);
    }

    MenuDifficulty.prototype.init = function() {
      var hard, normal;
      normal = this.getMenuEl('Normal', 'The default difficulty.');
      normal.appendTo(this.menu).data('handler', this.handler);
      normal.data('difficulty', 'normal');
      hard = this.getMenuEl('Hard', 'How Aqua Emblem is meant to be played. ' + 'Units start with lower stats ' + 'and gain experience more slowly.');
      hard.appendTo(this.menu).data('handler', this.handler);
      hard.data('difficulty', 'hard');
      return this.selectFirst();
    };

    MenuDifficulty.prototype.back = function() {
      return this.ui.initMenu(_sui.MenuNoData);
    };

    MenuDifficulty.prototype.handler = function() {
      var file;
      file = new _file.createNewFile(this.getSelected().data('difficulty'));
      this.ui.destroy();
      return file.init();
    };

    return MenuDifficulty;

  })(_sui.Menu);

  _sui.MenuMain = (function(_super) {
    __extends(MenuMain, _super);

    function MenuMain() {
      this.handleErase = __bind(this.handleErase, this);
      this.handleSaveBackup = __bind(this.handleSaveBackup, this);
      this.handleContinue = __bind(this.handleContinue, this);
      return MenuMain.__super__.constructor.apply(this, arguments);
    }

    MenuMain.prototype.init = function() {
      var fs, itemContinue;
      fs = this.ui.file.fileState;
      itemContinue = this.getMenuEl('Continue', "Chapter " + fs.chapterId + ": " + fs.chapterName);
      itemContinue.appendTo(this.menu).data('handler', this.handleContinue);
      this.getMenuEl('Save backup', 'Clearing your browser data will delete your save. ' + 'Save a backup to be safe.').appendTo(this.menu).data('handler', this.handleSaveBackup);
      this.getMenuEl('Erase data', 'If you want to start a new game or upload a backup.').appendTo(this.menu).data('handler', this.handleErase);
      this.selectFirst();
      return this.controlState = new _cs.sui.Menu(this, this.menu);
    };

    MenuMain.prototype.handleContinue = function() {
      this.ui.destroy();
      return this.ui.file.init();
    };

    MenuMain.prototype.handleSaveBackup = function() {
      var dia, str;
      dia = this.ui.saveBackupDialog;
      dia.dialog(this.ui.dialogOptions);
      str = this.ui.file.pickle();
      dia.find('textarea').val(str);
      this.ui.prevControlState = this.ui.controlState;
      return this.ui.controlState = new _cs.ControlState(this.ui);
    };

    MenuMain.prototype.handleErase = function() {
      if (confirm('Are you sure you want to delete your saved game?')) {
        this.ui.file = null;
        localStorage.removeItem('file');
        return this.ui.initMenu(_sui.MenuNoData);
      }
    };

    return MenuMain;

  })(_sui.Menu);

}).call(this);
