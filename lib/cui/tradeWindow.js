// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _cui.TradeWindow = (function() {
    function TradeWindow(ui) {
      this.ui = ui;
      this.window = $('.trade-window');
    }

    TradeWindow.prototype.init = function(unit0, unit1, callback) {
      var css;
      this.callback = callback;
      this.units = [unit0, unit1];
      this.tradeMade = false;
      this.window.html('');
      this.initHalf(unit0, 0);
      this.initHalf(unit1, 1);
      this.setCursorPos(new Position(0, 0));
      this.prevControlState = this.ui.controlState;
      this.ui.controlState = new _cs.cui.TradeWindow(this.ui, this);
      this.ui.viewportOverlay.show();
      css = this.ui.centerElement(this.window, 0);
      this.window.css(css);
      return this.show();
    };

    TradeWindow.prototype.initHalf = function(unit, j) {
      var container, img, inventory, top;
      container = $('<div></div>').addClass('half');
      container.addClass('half-' + unit.id);
      top = $('<div></div>').addClass('top');
      img = $('<img/>').attr('src', unit.getImagePath());
      img.appendTo(top);
      top.appendTo(container);
      inventory = $('<div></div>');
      inventory.addClass('inventory neutral-box');
      this.fillInventory(unit, inventory, j);
      inventory.appendTo(container);
      return container.appendTo(this.window);
    };

    TradeWindow.prototype.fillInventory = function(unit, inventoryEl, j) {
      var arrowImg, i, item, itemContainer, options, sel, _i, _ref, _results;
      if (inventoryEl == null) {
        sel = ".half-" + unit.id + " .inventory";
        inventoryEl = this.window.find(sel);
      }
      inventoryEl.html('');
      _results = [];
      for (i = _i = 0, _ref = _unit.Inventory.MAX_SIZE - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        itemContainer = $('<div></div>').addClass('item-container');
        itemContainer.data('pos', new Position(i, j));
        arrowImg = $('<div></div>').addClass('arrow-image');
        arrowImg.appendTo(itemContainer);
        item = unit.inventory.get(i);
        if (item != null) {
          options = {
            usable: unit.canUse(item)
          };
          itemContainer.append(item.getElement(options));
          itemContainer.data('item', item);
        }
        _results.push(inventoryEl.append(itemContainer));
      }
      return _results;
    };

    TradeWindow.prototype.getCursorEl = function() {
      var half;
      half = $(this.window.find('.half')[this.cursorPos.j]);
      return $(half.find('.item-container')[this.cursorPos.i]);
    };

    TradeWindow.prototype.setCursorPos = function(cursorPos) {
      this.cursorPos = cursorPos;
      this.window.find('.arrow-image.cursor-at').removeClass('cursor-at');
      return this.getCursorEl().find('.arrow-image').addClass('cursor-at');
    };

    TradeWindow.prototype.moveCursor = function(delta) {
      return this.setCursorPos(this.cursorPos.add(delta));
    };

    TradeWindow.prototype.doSelect = function() {
      this.selectedEl = this.getCursorEl().addClass('selected');
      this.cursorPos.i = 0;
      this.cursorPos.j = (this.cursorPos.j + 1) % 2;
      this.setCursorPos(this.cursorPos);
      return this.ui.controlState = new _cs.cui.TradeWindow2(this.ui, this);
    };

    TradeWindow.prototype.doDeselect = function() {
      var selected;
      selected = this.window.find('.item-container.selected');
      this.setCursorPos(selected.data('pos'));
      selected.removeClass('selected');
      return this.ui.controlState = new _cs.cui.TradeWindow(this.ui, this);
    };

    TradeWindow.prototype.doTrade = function() {
      var iFrom, unitFrom, unitTo;
      this.tradeMade = true;
      unitFrom = this.units[(this.cursorPos.j + 1) % 2];
      unitTo = this.units[this.cursorPos.j];
      iFrom = this.selectedEl.data('pos').i;
      if (this.cursorPos.i === unitTo.inventory.size()) {
        unitFrom.inventory.remove(iFrom);
      } else {
        unitFrom.inventory.set(iFrom, this.getCursorEl().data('item'));
      }
      unitTo.inventory.set(this.cursorPos.i, this.selectedEl.data('item'));
      this.fillInventory(this.units[0], null, 0);
      this.fillInventory(this.units[1], null, 1);
      this.setCursorPos(this.cursorPos);
      return this.ui.controlState = new _cs.cui.TradeWindow(this.ui, this);
    };

    TradeWindow.prototype.show = function() {
      return this.window.css('visibility', 'visible');
    };

    TradeWindow.prototype.hide = function() {
      var hide;
      this.ui.viewportOverlay.hide();
      hide = {
        'visibility': 'hidden'
      };
      this.window.css(hide);
      return this.window.find('.arrow-image').css(hide);
    };

    return TradeWindow;

  })();

  _cs.cui.TradeWindow = (function(_super) {
    __extends(TradeWindow, _super);

    function TradeWindow(ui, windowObj) {
      this.ui = ui;
      this.windowObj = windowObj;
    }

    TradeWindow.prototype.f = function() {
      return this.windowObj.doSelect();
    };

    TradeWindow.prototype.d = function() {
      this.windowObj.hide();
      this.ui.controlState = this.windowObj.prevControlState;
      return this.windowObj.callback(this.windowObj.tradeMade);
    };

    TradeWindow.prototype.up = function() {
      var cp, unit;
      cp = this.windowObj.cursorPos;
      if (cp.i > 0) {
        return this.windowObj.moveCursor(new Position(-1, 0));
      } else {
        unit = this.windowObj.units[cp.j];
        cp.i = unit.inventory.size() - 1;
        return this.windowObj.setCursorPos(cp);
      }
    };

    TradeWindow.prototype.down = function() {
      var cp, unit;
      cp = this.windowObj.cursorPos;
      unit = this.windowObj.units[cp.j];
      if (cp.i + 1 < unit.inventory.size()) {
        return this.windowObj.moveCursor(new Position(1, 0));
      } else {
        cp.i = 0;
        return this.windowObj.setCursorPos(cp);
      }
    };

    TradeWindow.prototype.left = function() {
      var cp, len;
      cp = this.windowObj.cursorPos;
      if (cp.j === 1) {
        len = this.windowObj.units[0].inventory.size();
        if (cp.i >= len) {
          cp.i = len - 1;
          this.windowObj.setCursorPos(cp);
        }
        return this.windowObj.moveCursor(new Position(0, -1));
      }
    };

    TradeWindow.prototype.right = function() {
      var cp, len;
      cp = this.windowObj.cursorPos;
      if (cp.j === 0) {
        len = this.windowObj.units[1].inventory.size();
        if (cp.i >= len) {
          cp.i = len - 1;
          this.windowObj.setCursorPos(cp);
        }
        return this.windowObj.moveCursor(new Position(0, 1));
      }
    };

    return TradeWindow;

  })(_cs.cui.Chapter);

  _cs.cui.TradeWindow2 = (function(_super) {
    __extends(TradeWindow2, _super);

    function TradeWindow2(ui, windowObj) {
      this.ui = ui;
      this.windowObj = windowObj;
    }

    TradeWindow2.prototype.f = function() {
      return this.windowObj.doTrade();
    };

    TradeWindow2.prototype.d = function() {
      return this.windowObj.doDeselect();
    };

    TradeWindow2.prototype.up = function() {
      var cp, unit;
      cp = this.windowObj.cursorPos;
      unit = this.windowObj.units[cp.j];
      if (cp.i > 0) {
        return this.windowObj.moveCursor(new Position(-1, 0));
      } else {
        cp.i = unit.inventory.size();
        return this.windowObj.setCursorPos(cp);
      }
    };

    TradeWindow2.prototype.down = function() {
      var cp, unit;
      cp = this.windowObj.cursorPos;
      unit = this.windowObj.units[cp.j];
      if (cp.i + 1 < _unit.Inventory.MAX_SIZE && cp.i < unit.inventory.size()) {
        return this.windowObj.moveCursor(new Position(1, 0));
      } else {
        cp.i = 0;
        return this.windowObj.setCursorPos(cp);
      }
    };

    return TradeWindow2;

  })(_cs.cui.Chapter);

}).call(this);
