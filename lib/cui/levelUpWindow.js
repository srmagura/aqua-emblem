// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _cui.LevelUpWindow = (function() {
    function LevelUpWindow(ui) {
      this.ui = ui;
      this.showIncrement = __bind(this.showIncrement, this);
      this.window = $('.level-up-window');
    }

    LevelUpWindow.prototype.init = function(unit, increment, callback) {
      var css, st;
      this.unit = unit;
      this.increment = increment;
      this.callback = callback;
      this.initCommon();
      this.initStats();
      this.ui.controlState = new _cs.cui.Chapter(this.ui);
      css = this.ui.centerElement(this.window, 4);
      css.visibility = 'visible';
      this.window.css(css);
      this.incIndex = 0;
      this.incSize = 0;
      for (st in this.increment) {
        this.incSize++;
      }
      this.delay = 750 / this.ui.speedMultiplier;
      return setTimeout(this.showIncrement, this.delay);
    };

    LevelUpWindow.prototype.initCommon = function() {
      var w;
      this.ui.viewportOverlay.show();
      w = this.window;
      w.find('.common .image-wrapper').removeClass('insignia');
      w.find('.common img').attr('src', 'images/characters/' + this.unit.name.toLowerCase() + '.png');
      w.find('.common .name').html(this.unit.name);
      return w.find('.common .level').text(this.unit.level);
    };

    LevelUpWindow.prototype.initStats = function() {
      var el, st, stats, _i, _len, _ref, _results;
      stats = this.window.find('.stats');
      this.statTypes = ['maxHp', 'str', 'mag', 'def', 'res', 'maxMp', 'skill', 'speed', 'luck', 'move'];
      _ref = this.statTypes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        st = _ref[_i];
        el = stats.find('.' + st);
        el.find('span').text(this.unit.baseStats[st]);
        _results.push(el.removeClass('stat-up'));
      }
      return _results;
    };

    LevelUpWindow.prototype.showIncrement = function() {
      var el, st;
      while (true) {
        if (this.incIndex === this.statTypes.length) {
          this.ui.controlState = new _cs.cui.LevelUpWindow(this.ui, this);
          return;
        }
        st = this.statTypes[this.incIndex++];
        if (st in this.increment) {
          break;
        }
      }
      el = this.window.find(".stats ." + st);
      el.find('span').text(this.unit.baseStats[st] + 1);
      el.addClass('stat-up');
      el.find('img').css('visibility', 'visible');
      return setTimeout(this.showIncrement, this.delay / 2);
    };

    LevelUpWindow.prototype.hide = function() {
      this.ui.viewportOverlay.hide();
      this.window.css('visibility', 'hidden');
      return this.window.find('.stat img').css('visibility', 'hidden');
    };

    return LevelUpWindow;

  })();

  _cs.cui.LevelUpWindow = (function(_super) {
    __extends(LevelUpWindow, _super);

    function LevelUpWindow(ui, windowObj) {
      this.ui = ui;
      this.windowObj = windowObj;
    }

    LevelUpWindow.prototype.f = function() {
      return this.d();
    };

    LevelUpWindow.prototype.d = function() {
      this.windowObj.hide();
      return this.windowObj.callback();
    };

    return LevelUpWindow;

  })(_cs.cui.Chapter);

}).call(this);
