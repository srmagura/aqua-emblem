// Generated by CoffeeScript 1.8.0
(function() {
  _cui.CanvasOverlay = (function() {
    function CanvasOverlay(ui) {
      this.ui = ui;
      this.overlay = $('.canvas-dark-overlay');
    }

    CanvasOverlay.prototype.init = function() {
      return this.overlay.css({
        width: this.ui.canvas.width(),
        height: this.ui.canvas.height()
      });
    };

    CanvasOverlay.prototype.show = function() {
      return this.overlay.css('display', 'block');
    };

    CanvasOverlay.prototype.hide = function() {
      return this.overlay.css('display', 'none');
    };

    return CanvasOverlay;

  })();

  _cui.MessageBox = (function() {
    function MessageBox(ui) {
      this.ui = ui;
      this.canvasContainer = $('.canvas-container');
      this.ui.canvasOverlay.init();
    }

    MessageBox.prototype.showMessage = function(params) {
      var afterFadeOut, css, el, fadeDuration, toDelay;
      el = $('<div></div>').addClass(params.cls);
      el.addClass('message-box').html(params.html);
      this.canvasContainer.append(el);
      css = $.extend(params.css, this.ui.centerElement(el, params.padding));
      css.visibility = 'visible';
      css.display = 'none';
      fadeDuration = 800 / this.ui.speedMultiplier;
      this.ui.canvasOverlay.init();
      this.ui.canvasOverlay.overlay.fadeIn(fadeDuration);
      el.css(css).fadeIn(fadeDuration);
      afterFadeOut = (function(_this) {
        return function() {
          if (params.callback != null) {
            el.remove();
            return params.callback();
          }
        };
      })(this);
      toDelay = (function(_this) {
        return function() {
          _this.ui.canvasOverlay.overlay.fadeOut(fadeDuration);
          return el.fadeOut(fadeDuration, afterFadeOut);
        };
      })(this);
      if (params.doFadeOut) {
        return setTimeout(toDelay, fadeDuration * 2);
      } else {
        return setTimeout(afterFadeOut, fadeDuration * 2);
      }
    };

    MessageBox.prototype.showPhaseMessage = function(team, callback) {
      var css, text;
      css = {};
      if (team instanceof _team.PlayerTeam) {
        text = 'Player phase';
        css.color = '#00C';
      } else {
        text = 'Enemy phase';
        css.color = '#C00';
      }
      return this.showMessage({
        html: text,
        cls: 'big-message phase-message',
        css: css,
        padding: 10,
        callback: (function() {
          return callback(team);
        }),
        doFadeOut: true
      });
    };

    MessageBox.prototype.showVictoryMessage = function() {
      return this.showMessage({
        html: 'Victory!',
        cls: 'big-message victory-message',
        css: {},
        padding: 10,
        callback: this.ui.doneVictory,
        doFadeOut: false
      });
    };

    MessageBox.prototype.showDefeatMessage = function() {
      return this.showMessage({
        html: 'Defeat.',
        cls: 'big-message defeat-message',
        css: {},
        padding: 10,
        callback: this.ui.doneDefeat,
        doFadeOut: false
      });
    };

    MessageBox.prototype.showBrokenMessage = function(item, callback) {
      var content;
      content = $('<div> <div class="text">broke.</div></div>');
      content.prepend(item.getElement({
        showUses: false
      }));
      return this.showMessage({
        html: content,
        cls: 'neutral-box item-message',
        css: {},
        padding: 3,
        callback: callback,
        doFadeOut: true
      });
    };

    MessageBox.prototype.showReceivedMessage = function(unit, item, callback) {
      var content;
      content = $("<div><div class='text'>" + unit.name + " received</div> </div>");
      content.append(item.getElement({
        showUses: false
      }));
      return this.showMessage({
        html: content,
        cls: 'neutral-box item-message',
        css: {},
        padding: 3,
        callback: callback,
        doFadeOut: true
      });
    };

    return MessageBox;

  })();

}).call(this);
