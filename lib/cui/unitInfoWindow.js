// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _cui.ViewportOverlay = (function() {
    function ViewportOverlay(ui) {
      this.ui = ui;
      this.overlay = $('.viewport-overlay');
    }

    ViewportOverlay.prototype.show = function() {
      return this.overlay.show();
    };

    ViewportOverlay.prototype.hide = function() {
      return this.overlay.hide();
    };

    return ViewportOverlay;

  })();

  _cui.UnitInfoWindow = (function() {
    function UnitInfoWindow(ui) {
      var itemInfoBoxEl, skillInfoBoxEl, skillsEl;
      this.ui = ui;
      this.skillsBoxOnD = __bind(this.skillsBoxOnD, this);
      this.window = $('.unit-info-window');
      skillInfoBoxEl = $('.canvas-container .skill-info-box');
      this.skillInfoBox = new _cui.SkillInfoBox(this.ui, skillInfoBoxEl);
      skillsEl = $('.invisible .tab-content-skills .skills-box');
      this.skillsBox = new _cui.SkillsBox(this.ui, skillsEl, this.skillInfoBox);
      itemInfoBoxEl = $('.sidebar .item-info-box').clone();
      $('.canvas-container').append(itemInfoBoxEl);
      this.itemInfoBox = new _cui.ItemInfoBox(this.ui, itemInfoBoxEl);
    }

    UnitInfoWindow.prototype.init = function(unit) {
      var css;
      this.unit = unit;
      this.initCommon();
      this.initInventoryTab();
      this.initStatsTab();
      if (this.unit.skills != null) {
        this.initSkillsTab();
      }
      this.prevControlState = this.ui.controlState;
      this.ui.controlState = new _cs.cui.UnitInfoWindow(this.ui, this);
      css = this.ui.centerElement(this.window, 4);
      css.visibility = 'visible';
      this.window.css(css);
      css = this.window.position();
      css.left += this.window.width() + 20;
      this.skillInfoBox.box.css(css);
      css.top += this.window.find('.inventory').position().top + 3;
      return this.itemInfoBox.box.css(css);
    };

    UnitInfoWindow.prototype.initCommon = function() {
      var w;
      this.ui.viewportOverlay.show();
      w = this.window;
      w.removeClass('blue-box').removeClass('red-box');
      if (this.unit.team === this.ui.chapter.playerTeam) {
        w.addClass('blue-box');
      } else {
        w.addClass('red-box');
      }
      if (this.unit.picture) {
        w.find('.common .image-wrapper').removeClass('insignia');
        w.find('.common img').attr('src', this.unit.getImagePath());
      } else if (this.unit.team.insigniaImagePath != null) {
        w.find('.common .image-wrapper').addClass('insignia');
        w.find('.common img').attr('src', this.unit.team.insigniaImagePath);
      }
      w.find('.common .name').html(this.unit.name);
      w.find('.common .uclass').text(this.unit.uclassName);
      w.find('.common .level').text(this.unit.level);
      w.find('.common .exp').text(Math.floor(this.unit.exp * 100));
      w.find('.labels > div').removeClass('selected');
      return w.find('.tab-content').hide();
    };

    UnitInfoWindow.prototype.initInventoryTab = function() {
      var combatStats, combatStatsStr, inv, invContent, item, key, options, value, w, _i, _len, _ref, _results;
      w = this.window;
      w.find('.tab-label-inventory').addClass('selected');
      invContent = w.find('.tab-content-inventory').show();
      inv = invContent.find('.inventory').html('');
      _ref = this.unit.inventory.it();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        options = {
          usable: this.unit.canUse(item),
          equipped: this.unit.equipped === item
        };
        inv.append(item.getElement(options));
      }
      this.unit.calcCombatStats();
      combatStats = invContent.find('.combat-stats');
      combatStatsStr = {
        hit: this.unit.hit,
        crit: this.unit.crit,
        evade: this.unit.evade,
        atk: this.unit.atk
      };
      _results = [];
      for (key in combatStatsStr) {
        value = combatStatsStr[key];
        if (value == null) {
          value = '--';
        } else {
          value = Math.round(value);
        }
        _results.push(combatStats.find('.' + key).text(value));
      }
      return _results;
    };

    UnitInfoWindow.prototype.initStatsTab = function() {
      var buff, delta, st, statTypes, stats, td, weaponClass, weaponsEl, _i, _j, _len, _len1, _ref, _results;
      stats = this.window.find('.tab-content-stats');
      statTypes = ['str', 'skill', 'mag', 'speed', 'def', 'luck', 'res', 'move'];
      for (_i = 0, _len = statTypes.length; _i < _len; _i++) {
        st = statTypes[_i];
        td = stats.find('.' + st);
        td.text(this.unit.baseStats[st]);
        buff = $('<span></span>').addClass('buff');
        delta = this.unit[st] - this.unit.baseStats[st];
        if (delta > 0) {
          buff.text('+' + delta);
        }
        if (delta !== 0) {
          td.append(buff);
        }
      }
      weaponsEl = stats.find('.weapons').html('');
      _ref = this.unit.wield;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        weaponClass = _ref[_j];
        _results.push($('<div><img src="images/items/' + (new weaponClass()).image + '" /></div>').appendTo(weaponsEl));
      }
      return _results;
    };

    UnitInfoWindow.prototype.initSkillsTab = function() {
      var tab;
      this.window.find('.tab-container .labels').append($('.invisible .tab-label-skills'));
      tab = $('.invisible .tab-content-skills');
      this.window.find('.tab-container .content').append(tab);
      return this.skillsBox.init(this.unit, this.skillsBoxOnD);
    };

    UnitInfoWindow.prototype.skillsBoxOnD = function() {
      return this.ui.controlState = new _cs.cui.UnitInfoWindow(this.ui, this);
    };

    UnitInfoWindow.prototype.hide = function() {
      this.window.find('.tab-label-skills, .tab-content-skills').removeClass('selected').attr('style', '').appendTo('.invisible');
      this.ui.viewportOverlay.hide();
      return this.window.css('visibility', 'hidden');
    };

    UnitInfoWindow.prototype.getSelectedLabel = function() {
      return this.window.find('.tab-container .labels .selected');
    };

    UnitInfoWindow.prototype.changeTab = function(tabId) {
      var labels, oldTabId;
      labels = this.window.find('.tab-container .labels');
      oldTabId = labels.find('.selected').removeClass('selected').find('.tab-id').text();
      this.window.find('.tab-container .tab-content-' + oldTabId).hide();
      labels.find('.tab-label-' + tabId).addClass('selected');
      return this.window.find('.tab-container .tab-content-' + tabId).show();
    };

    UnitInfoWindow.prototype.selectedItemChanged = function() {
      var item, selected;
      selected = this.window.find('.inventory .selected');
      item = selected.data('item');
      return this.itemInfoBox.init(item, this.unit.canUse(item));
    };

    return UnitInfoWindow;

  })();

  _cs.cui.UnitInfoWindow = (function(_super) {
    __extends(UnitInfoWindow, _super);

    function UnitInfoWindow(ui, windowObj) {
      this.ui = ui;
      this.windowObj = windowObj;
    }

    UnitInfoWindow.prototype.d = function() {
      this.windowObj.hide();
      return this.ui.controlState = this.windowObj.prevControlState;
    };

    UnitInfoWindow.prototype.s = function() {
      var el, sel;
      sel = this.windowObj.getSelectedLabel();
      if (sel.hasClass('tab-label-skills')) {
        return this.windowObj.skillsBox.giveControl();
      } else if (sel.hasClass('tab-label-inventory')) {
        el = this.windowObj.window.find('.inventory');
        this.ui.controlState = new _cs.cui.UnitInfoWindowInventory(this.ui, el);
        el.children().first().addClass('selected');
        return this.windowObj.selectedItemChanged();
      }
    };

    UnitInfoWindow.prototype.left = function() {
      var label, selectedLabel, tabId;
      selectedLabel = this.windowObj.getSelectedLabel();
      if (selectedLabel.prev().size() === 0) {
        label = selectedLabel.siblings().last();
      } else {
        label = selectedLabel.prev();
      }
      tabId = label.find('.tab-id').text();
      return this.windowObj.changeTab(tabId);
    };

    UnitInfoWindow.prototype.right = function() {
      var label, selectedLabel, tabId;
      selectedLabel = this.windowObj.getSelectedLabel();
      if (selectedLabel.next().size() === 0) {
        label = selectedLabel.siblings().first();
      } else {
        label = selectedLabel.next();
      }
      tabId = label.find('.tab-id').text();
      return this.windowObj.changeTab(tabId);
    };

    return UnitInfoWindow;

  })(_cs.cui.Chapter);

  _cs.cui.UnitInfoWindowInventory = (function(_super) {
    __extends(UnitInfoWindowInventory, _super);

    function UnitInfoWindowInventory(ui, menu) {
      this.ui = ui;
      UnitInfoWindowInventory.__super__.constructor.call(this, this.ui, {
        menu: menu
      });
    }

    UnitInfoWindowInventory.prototype.onChange = function() {
      return this.ui.unitInfoWindow.selectedItemChanged();
    };

    UnitInfoWindowInventory.prototype.d = function() {
      this.menuObj.menu.find('.selected').removeClass('selected');
      this.ui.unitInfoWindow.itemInfoBox.hide();
      return this.ui.controlState = new _cs.cui.UnitInfoWindow(this.ui, this.ui.unitInfoWindow);
    };

    return UnitInfoWindowInventory;

  })(_cs.cui.Menu);

}).call(this);
