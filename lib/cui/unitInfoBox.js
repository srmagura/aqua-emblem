// Generated by CoffeeScript 1.7.1
(function() {
  _cui.UnitInfoBox = (function() {
    function UnitInfoBox(ui, selector) {
      this.ui = ui;
      this.box = $(selector);
    }

    UnitInfoBox.prototype.update = function() {
      var unit;
      unit = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
      if (unit != null) {
        this.init(unit, false, true);
        return this.show();
      } else {
        return this.hide();
      }
    };

    UnitInfoBox.prototype.init = function(unit, animate, showStatus) {
      var src;
      if (animate == null) {
        animate = false;
      }
      if (showStatus == null) {
        showStatus = false;
      }
      this.box.removeClass('show-status');
      if (unit.picture) {
        this.box.find('img').attr('src', unit.getImagePath());
        this.box.find('.image-wrapper').show();
      } else {
        this.box.find('.image-wrapper').hide();
      }
      this.box.find('.name').text(unit.name);
      if (unit.equipped != null) {
        src = unit.equipped.getImagePath();
        this.box.find('.equipped').attr('src', src);
      } else {
        this.box.find('.equipped').removeAttr('src');
      }
      this.delay = 200 / this.ui.speedMultiplier;
      this.populateHp(unit, animate);
      this.populateMp(unit, animate);
      this.box.find('.status-container').remove();
      if (showStatus) {
        this.showStatus(unit);
      }
      return this.show();
    };

    UnitInfoBox.prototype.populateHp = function(unit, animate) {
      var width;
      this.box.find('.hp').text(unit.hp);
      this.box.find('.max-hp').text(unit.maxHp);
      width = unit.hp / unit.maxHp * this.box.find('.hp-bar').width();
      if (animate) {
        return this.box.find('.hp-bar-filled').animate({
          width: width
        }, this.delay);
      } else {
        return this.box.find('.hp-bar-filled').width(width);
      }
    };

    UnitInfoBox.prototype.populateMp = function(unit, animate) {
      var width;
      if ('maxMp' in unit) {
        this.box.find('.mp').text(unit.mp);
        this.box.find('.max-mp').text(unit.maxMp);
        width = unit.mp / unit.maxMp * this.box.find('.mp-bar').width();
        if (animate) {
          this.box.find('.mp-bar-filled').animate({
            width: width
          }, this.delay);
        } else {
          this.box.find('.mp-bar-filled').width(width);
        }
        this.box.find('.mp-bar-container').show();
      } else {
        this.box.find('.mp-bar-container').hide();
      }
      if (unit.team === this.ui.chapter.playerTeam) {
        return this.box.removeClass('red-box').addClass('blue-box');
      } else {
        return this.box.removeClass('blue-box').addClass('red-box');
      }
    };

    UnitInfoBox.prototype.showStatus = function(unit) {
      var container, status, _i, _len, _ref, _results;
      if (unit.statuses.length === 0) {
        return;
      }
      container = $('<div></div>').addClass('status-container');
      this.box.append(container).addClass('show-status');
      _ref = unit.statuses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        status = _ref[_i];
        _results.push(container.append(status.getEl()));
      }
      return _results;
    };

    UnitInfoBox.prototype.show = function() {
      return this.box.css('visibility', 'visible');
    };

    UnitInfoBox.prototype.hide = function() {
      return this.box.css('visibility', 'hidden');
    };

    return UnitInfoBox;

  })();

}).call(this);
