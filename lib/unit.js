// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Team = (function() {
    function Team(units) {
      var unit, _i, _len, _ref;
      this.units = units;
      _ref = this.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        unit.setTeam(this);
      }
    }

    return Team;

  })();

  window.PlayerTeam = (function(_super) {
    __extends(PlayerTeam, _super);

    function PlayerTeam() {
      return PlayerTeam.__super__.constructor.apply(this, arguments);
    }

    return PlayerTeam;

  })(Team);

  window.AI_TYPE = {
    NORMAL: 0,
    HALT: 1
  };

  window.EnemyTeam = (function(_super) {
    __extends(EnemyTeam, _super);

    function EnemyTeam(units, attr) {
      var unit, _i, _len, _ref;
      this.units = units;
      if (attr == null) {
        attr = {};
      }
      _ref = this.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        if (!('aiType' in unit)) {
          unit.aiType = AI_TYPE.NORMAL;
        }
        if ('defaultName' in attr && (unit.name == null)) {
          unit.name = attr.defaultName;
        }
      }
      EnemyTeam.__super__.constructor.call(this, this.units);
    }

    return EnemyTeam;

  })(Team);

  window.Unit = (function() {
    function Unit(attr) {
      var item, key, range, stat, value, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      this.rawStats = {};
      _ref = this.baseStats;
      for (stat in _ref) {
        value = _ref[stat];
        if (stat in this.growthRates) {
          value += this.growthRates[stat] * (attr['level'] - 1);
        }
        this.rawStats[stat] = value;
        this[stat] = Math.round(value);
      }
      for (key in attr) {
        value = attr[key];
        this[key] = value;
      }
      if (!('picture' in this)) {
        this.picture = false;
      }
      if (!('boss' in this)) {
        this.boss = false;
      }
      if (!('inventory' in this)) {
        this.inventory = [];
      }
      this.totalRange = [];
      _ref1 = this.inventory;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (item instanceof window.item.Weapon) {
          this.equipped = item;
          _ref2 = item.range;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            range = _ref2[_j];
            if (__indexOf.call(this.totalRange, range) < 0) {
              this.totalRange.push(range);
            }
          }
          break;
        }
      }
      this.offset = new Position(0, 0);
    }

    Unit.prototype.setTeam = function(team) {
      var dir, filename, prefix;
      this.team = team;
      prefix = "images/dango/";
      filename = this.uclassName.toLowerCase() + ".png";
      if (this.team instanceof PlayerTeam) {
        dir = 'player/';
      } else {
        dir = 'enemy/';
      }
      this.imageObjects = {};
      this.imageObjects.normal = new Image();
      this.imageObjects.normal.src = prefix + dir + filename;
      this.imageObjects.done = new Image();
      this.imageObjects.done.src = prefix + 'done/' + filename;
      if (this.boss) {
        this.imageObjects.crown = new Image();
        return this.imageObjects.crown.src = 'images/crown.png';
      }
    };

    Unit.prototype.setDone = function() {
      this.done = true;
      return this.ui.chapter.checkAllDone();
    };

    Unit.prototype.followPath = function(path, pathFollowCallback) {
      this.path = path;
      this.pathFollowCallback = pathFollowCallback;
      this.followingPath = true;
      return this.pathNext();
    };

    Unit.prototype.pathNext = function() {
      this.offset = new Position(0, 0);
      this.pos = this.path.shift().clone();
      if (this.path.length !== 0) {
        this.direction = this.path[0].subtract(this.pos);
        return this.movementSpeed = .4;
      } else {
        this.direction = null;
        this.followingPath = false;
        return this.pathFollowCallback();
      }
    };

    Unit.prototype.calcCombatStats = function() {
      if (this.equipped == null) {
        this.attackSpeed = this.speed;
      } else {
        this.attackSpeed = this.speed - this.equipped.weight + 5;
      }
      if (this.equipped != null) {
        this.hit = this.equipped.hit + 2 * this.skill + this.luck / 2;
        this.atk = this.str + this.equipped.might;
        this.crit = this.equipped.crit + this.skill / 2;
      }
      this.evade = this.attackSpeed * 2 + this.luck;
      return this.critEvade = this.luck;
    };

    Unit.prototype.render = function(ui, ctx) {
      var image, offset;
      if (this.done) {
        image = this.imageObjects.done;
      } else {
        image = this.imageObjects.normal;
      }
      offset = this.pos.scale(this.ui.tw).add(this.offset).subtract(ui.origin);
      ctx.drawImage(image, offset.j + 1, offset.i + 2);
      if (this.boss) {
        return ctx.drawImage(this.imageObjects.crown, offset.j + 12, offset.i + 3);
      }
    };

    return Unit;

  })();

}).call(this);
