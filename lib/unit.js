// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Team = (function() {
    function Team(units) {
      var unit, _i, _len, _ref;
      this.units = units;
      _ref = this.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        unit.setTeam(this);
      }
    }

    return Team;

  })();

  window.PlayerTeam = (function(_super) {
    __extends(PlayerTeam, _super);

    function PlayerTeam(units, attr) {
      var unit, _i, _len, _ref;
      this.units = units;
      if (attr == null) {
        attr = {};
      }
      _ref = this.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        if (!('skills' in unit)) {
          unit.skills = [];
        }
        unit.skills.push(new skill.Defend());
      }
      PlayerTeam.__super__.constructor.call(this, this.units);
    }

    return PlayerTeam;

  })(Team);

  window.AI_TYPE = {
    NORMAL: 0,
    HALT: 1
  };

  window.EnemyTeam = (function(_super) {
    __extends(EnemyTeam, _super);

    function EnemyTeam(units, attr) {
      var unit, _i, _len, _ref;
      this.units = units;
      if (attr == null) {
        attr = {};
      }
      _ref = this.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        if (!('aiType' in unit)) {
          unit.aiType = AI_TYPE.NORMAL;
        }
        if ('defaultName' in attr && (unit.name == null)) {
          unit.setName(attr.defaultName);
        }
      }
      EnemyTeam.__super__.constructor.call(this, this.units);
    }

    return EnemyTeam;

  })(Team);

  window.Unit = (function() {
    Unit.INVENTORY_SIZE = 5;

    function Unit(attr) {
      var key, value;
      for (key in attr) {
        value = attr[key];
        this[key] = value;
      }
      if (this.name != null) {
        this.setName(this.name);
      }
      this.calcStats();
      if (!('picture' in this)) {
        this.picture = false;
      }
      if (!('boss' in this)) {
        this.boss = false;
      }
      if (!('exp' in this)) {
        this.exp = 0;
      }
      if (!('inventory' in this)) {
        this.inventory = [];
      }
      this.refreshInventory();
      this.statuses = [];
      this.offset = new Position(0, 0);
    }

    Unit.prototype.setInventory = function(i, item) {
      this.inventory[i] = item;
      return this.refreshInventory();
    };

    Unit.prototype.deleteItem = function(i) {
      this.inventory.splice(i, 1);
      return this.refreshInventory();
    };

    Unit.prototype.refreshInventory = function() {
      var item, range, _i, _len, _ref, _results;
      this.totalRange = [];
      _ref = this.inventory;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (this.canWield(item)) {
          if (this.equipped == null) {
            this.equipped = item;
          }
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = item.range;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              range = _ref1[_j];
              if (__indexOf.call(this.totalRange, range) < 0) {
                _results1.push(this.totalRange.push(range));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Unit.prototype.onNewTurn = function() {
      var i, status, toRemove, _i, _j, _len, _len1, _ref, _results;
      toRemove = [];
      _ref = this.statuses;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        status = _ref[i];
        status.turns--;
        if (status.turns === 0) {
          toRemove.push(i);
        }
      }
      _results = [];
      for (_j = 0, _len1 = toRemove.length; _j < _len1; _j++) {
        i = toRemove[_j];
        _results.push(this.statuses.splice(i, 1));
      }
      return _results;
    };

    Unit.prototype.hasStatus = function(cls) {
      var status, _i, _len, _ref;
      _ref = this.statuses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        status = _ref[_i];
        if (status instanceof cls) {
          return true;
        }
      }
      return false;
    };

    Unit.prototype.canUseSkill = function(skl) {
      return this.mp >= skl.mp;
    };

    Unit.prototype.setName = function(name) {
      this.name = name;
      return this.id = this.name.toLowerCase().replace(' ', '-');
    };

    Unit.prototype.fillInBaseStats = function(baseStats) {
      var stat, value, _results;
      if (this.baseStats == null) {
        this.baseStats = {};
      }
      _results = [];
      for (stat in baseStats) {
        value = baseStats[stat];
        if (!(stat in this.baseStats)) {
          _results.push(this.baseStats[stat] = value);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Unit.prototype.calcStats = function(dryRun) {
      var increment, rounded, stat, value, _ref;
      if (dryRun == null) {
        dryRun = false;
      }
      increment = {};
      _ref = this.baseStats;
      for (stat in _ref) {
        value = _ref[stat];
        if (stat in this.growthRates) {
          value += this.growthRates[stat] * (this.level - 1);
        }
        rounded = Math.round(value);
        if (rounded > this[stat]) {
          increment[stat] = 1;
        }
        if (!dryRun) {
          this[stat] = rounded;
        }
      }
      return increment;
    };

    Unit.prototype.addExp = function(toAdd) {
      var newExp;
      newExp = this.exp + toAdd;
      if (newExp >= 1) {
        this.exp = newExp - 1;
        this.level++;
        return this.calcStats(true);
      } else {
        this.exp = newExp;
        return null;
      }
    };

    Unit.prototype.doIncrement = function(increment) {
      var stat, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = increment.length; _i < _len; _i++) {
        stat = increment[_i];
        _results.push(this[stat]++);
      }
      return _results;
    };

    Unit.prototype.canUse = function(item) {
      return this.canWield(item);
    };

    Unit.prototype.canWield = function(item) {
      var cls, _i, _len, _ref;
      if (!(item instanceof window.item.Weapon)) {
        return false;
      }
      _ref = this.wield;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cls = _ref[_i];
        if (item instanceof cls) {
          return true;
        }
      }
      return false;
    };

    Unit.prototype.setTeam = function(team) {
      var dir, filename, prefix;
      this.team = team;
      prefix = 'images/dango/';
      filename = this.uclassName.toLowerCase() + '.png';
      if (this.team instanceof PlayerTeam) {
        dir = 'player/';
      } else {
        dir = 'enemy/';
      }
      this.imageObjects = {};
      this.imageObjects.normal = new Image();
      this.imageObjects.normal.src = prefix + dir + filename;
      this.imageObjects.done = new Image();
      this.imageObjects.done.src = prefix + 'done/' + filename;
      if (this.boss) {
        this.imageObjects.crown = new Image();
        return this.imageObjects.crown.src = 'images/crown.png';
      }
    };

    Unit.prototype.setDone = function() {
      this.done = true;
      return this.ui.chapter.checkAllDone();
    };

    Unit.prototype.followPath = function(path, pathFollowCallback) {
      this.path = path;
      this.pathFollowCallback = pathFollowCallback;
      this.followingPath = true;
      return this.pathNext();
    };

    Unit.prototype.pathNext = function() {
      this.offset = new Position(0, 0);
      this.pos = this.path.shift().clone();
      if (this.path.length !== 0) {
        this.direction = this.path[0].subtract(this.pos);
        return this.movementSpeed = .4;
      } else {
        this.direction = null;
        this.followingPath = false;
        return this.pathFollowCallback();
      }
    };

    Unit.prototype.calcCombatStats = function() {
      if (this.equipped == null) {
        this.attackSpeed = this.speed;
      } else {
        this.attackSpeed = this.speed - this.equipped.weight + 5;
        if (this.attackSpeed < 0) {
          this.attackSpeed = 0;
        }
      }
      if (this.equipped != null) {
        this.hit = this.equipped.hit + 2 * this.skill + this.luck / 2;
        this.atk = this.str + this.equipped.might;
        this.crit = this.equipped.crit + this.skill / 2;
      }
      this.evade = this.attackSpeed * 2 + this.luck;
      return this.critEvade = this.luck;
    };

    Unit.prototype.render = function(ui, ctx) {
      var image, offset, s;
      if (this.done) {
        image = this.imageObjects.done;
      } else {
        image = this.imageObjects.normal;
      }
      offset = this.pos.scale(this.ui.tw).add(this.offset).subtract(ui.origin);
      ctx.drawImage(image, offset.j + 1, offset.i + 2);
      if (this.boss) {
        ctx.drawImage(this.imageObjects.crown, offset.j + 12, offset.i + 3);
      }
      if (this.statuses.length !== 0) {
        ctx.beginPath();
        s = 28;
        ctx.arc(offset.j + s, offset.i + s, 4, 0, 2 * Math.PI, false);
        ctx.fillStyle = 'orange';
        ctx.strokeStyle = '#440000';
        ctx.stroke();
        return ctx.fill();
      }
    };

    Unit.prototype.getImagePath = function() {
      return 'images/characters/' + this.name.toLowerCase() + '.png';
    };

    return Unit;

  })();

}).call(this);
