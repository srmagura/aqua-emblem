// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.EnemyTurn = (function(_super) {
    __extends(EnemyTurn, _super);

    function EnemyTurn() {
      return EnemyTurn.__super__.constructor.apply(this, arguments);
    }

    EnemyTurn.prototype.doTurn = function() {
      var eu;
      eu = this.ui.chapter.enemyTeam.units;
      if (eu.length !== 0) {
        return this.doUnitTurn(eu[0]);
      }
    };

    EnemyTurn.prototype.doUnitTurn = function(unit) {
      var afterScroll, attackRange, avail, available, available0, eu, inRange, nextUnit, obj, unit1, unit2, unitAt, _i, _j, _len, _len1;
      if (unit == null) {
        this.ui.chapter.initTurn(this.ui.chapter.playerTeam);
        return;
      }
      eu = this.ui.chapter.enemyTeam.units;
      nextUnit = eu[eu.indexOf(unit) + 1];
      if (unit.aiType === AI_TYPE.HALT) {
        available = [new Destination(unit.pos, [unit.pos])];
      } else {
        available0 = this.getAvailable(unit);
        available = [];
        for (_i = 0, _len = available0.length; _i < _len; _i++) {
          avail = available0[_i];
          unitAt = this.ui.chapter.getUnitAt(avail.pos);
          if (unitAt === null) {
            available.push(avail);
          }
        }
      }
      attackRange = this.movementGetAttackRange(available, unit);
      inRange = [];
      for (_j = 0, _len1 = attackRange.length; _j < _len1; _j++) {
        obj = attackRange[_j];
        unit1 = this.ui.chapter.getUnitAt(obj.targetSpot);
        unit2 = this.ui.chapter.getUnitAt(obj.moveSpot);
        if ((unit2 === null || unit2 === unit) && unit1 !== null && unit1.team === this.ui.chapter.playerTeam) {
          inRange.push({
            moveSpot: obj.moveSpot,
            path: obj.path,
            target: unit1
          });
        }
      }
      if (inRange.length !== 0) {
        afterScroll = (function(_this) {
          return function() {
            return unit.followPath(inRange[0].path, function() {
              var battle;
              battle = new Battle(_this.ui, unit, inRange[0].target);
              return battle.doBattle(function() {
                return setTimeout(function() {
                  return _this.doUnitTurn(nextUnit);
                }, 250);
              });
            });
          };
        })(this);
        return this.ui.scrollTo(unit.pos, afterScroll);
      } else {
        return this.doUnitTurn(nextUnit);
      }
    };

    return EnemyTurn;

  })(Turn);

}).call(this);
