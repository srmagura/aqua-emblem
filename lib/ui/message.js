// Generated by CoffeeScript 1.7.1
(function() {
  window.CanvasOverlay = (function() {
    function CanvasOverlay(ui) {
      this.ui = ui;
      this.overlay = $('.canvas-dark-overlay');
    }

    CanvasOverlay.prototype.init = function() {
      return this.overlay.css({
        width: this.ui.canvas.width(),
        height: this.ui.canvas.height()
      });
    };

    CanvasOverlay.prototype.show = function() {
      return this.overlay.css('display', 'block');
    };

    CanvasOverlay.prototype.hide = function() {
      return this.overlay.css('display', 'none');
    };

    return CanvasOverlay;

  })();

  window.MessageBox = (function() {
    function MessageBox(ui) {
      this.ui = ui;
      this.canvasContainer = $('.canvas-container');
      this.ui.canvasOverlay.init();
    }

    MessageBox.prototype.showMessage = function(text, cls, css, callback, callbackArg, doFadeOut) {
      var afterFadeOut, el, fadeDuration, toDelay;
      el = $(document.createElement('div'));
      el.addClass('message').addClass(cls).text(text);
      this.canvasContainer.append(el);
      css = $.extend(css, this.ui.centerElement(el, 10));
      css.visibility = 'visible';
      css.display = 'none';
      fadeDuration = 800;
      this.ui.canvasOverlay.init();
      this.ui.canvasOverlay.overlay.fadeIn(fadeDuration);
      el.css(css).fadeIn(fadeDuration);
      afterFadeOut = (function(_this) {
        return function() {
          return callback(callbackArg);
        };
      })(this);
      toDelay = (function(_this) {
        return function() {
          _this.ui.canvasOverlay.overlay.fadeOut(fadeDuration);
          return el.fadeOut(fadeDuration, afterFadeOut);
        };
      })(this);
      if (doFadeOut) {
        return setTimeout(toDelay, fadeDuration * 2);
      }
    };

    MessageBox.prototype.showPhaseMessage = function(team, callback) {
      var ch, css, text;
      ch = this.ui.chapter;
      css = {};
      if (team === ch.playerTeam) {
        text = 'Player phase';
        css.color = 'blue';
      } else {
        text = 'Enemy phase';
        css.color = 'red';
      }
      return this.showMessage(text, 'phase-message', css, callback, team, true);
    };

    MessageBox.prototype.showVictoryMessage = function() {
      return this.showMessage('Victory!', 'victory-message', {}, (function() {}), null, false);
    };

    MessageBox.prototype.showDefeatMessage = function() {
      return this.showMessage('Defeat.', 'defeat-message', {}, (function() {}), null, false);
    };

    return MessageBox;

  })();

}).call(this);
