// Generated by CoffeeScript 1.7.1
(function() {
  var CsUnitInfoWindow,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.UnitInfoWindow = (function() {
    function UnitInfoWindow(ui) {
      this.ui = ui;
      this.window = $('.unit-info-window');
    }

    UnitInfoWindow.prototype.init = function(unit) {
      this.unit = unit;
      this.initCommon();
      this.initInventoryTab();
      this.initStatsTab();
      return this.ui.controlState = new CsUnitInfoWindow(this.ui, this);
    };

    UnitInfoWindow.prototype.initCommon = function() {
      var docWidth, nameField, w;
      $('.dark-overlay').show();
      w = this.window;
      w.removeClass('blue-box').removeClass('red-box');
      if (this.unit.team === this.ui.chapter.playerTeam) {
        w.addClass('blue-box');
      } else {
        w.addClass('red-box');
      }
      docWidth = $(document).width();
      w.css({
        visibility: 'visible',
        left: (docWidth - w.width()) / 2
      });
      if (this.unit.picture) {
        w.find('.common .image-wrapper').removeClass('insignia');
        w.find('.common img').attr('src', 'images/characters/' + this.unit.name.toLowerCase() + '.png');
      } else if (this.unit.team.insigniaImagePath != null) {
        w.find('.common .image-wrapper').addClass('insignia');
        w.find('.common img').attr('src', this.unit.team.insigniaImagePath);
      }
      nameField = this.unit.name;
      if (this.unit.lord) {
        nameField += ' <div class="lord">(Lord)</div>';
      }
      w.find('.common .name').html(nameField);
      w.find('.common .uclass').text(this.unit.uclassName);
      w.find('.common .level').text(this.unit.level);
      w.find('.common .exp').text('0');
      w.find('.labels > div').removeClass('selected');
      return w.find('.tab-content').hide();
    };

    UnitInfoWindow.prototype.initInventoryTab = function() {
      var combatStats, combatStatsStr, inv, invContent, item, key, value, w, _i, _len, _ref, _results;
      w = this.window;
      w.find('.tab-label-inventory').addClass('selected');
      invContent = w.find('.tab-content-inventory').show();
      inv = invContent.find('.inventory').html('');
      _ref = this.unit.inventory;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        inv.append(item.getElement());
      }
      this.unit.calcCombatStats();
      combatStats = invContent.find('.combat-stats');
      combatStatsStr = {
        hit: this.unit.hit,
        crit: this.unit.crit,
        evade: this.unit.evade,
        atk: this.unit.atk
      };
      _results = [];
      for (key in combatStatsStr) {
        value = combatStatsStr[key];
        if (value == null) {
          value = '--';
        } else {
          value = Math.round(value);
        }
        _results.push(combatStats.find('.' + key).text(value));
      }
      return _results;
    };

    UnitInfoWindow.prototype.initStatsTab = function() {
      var st, statTypes, stats, weaponClass, weaponsEl, _i, _j, _len, _len1, _ref, _results;
      stats = this.window.find('.tab-content-stats');
      statTypes = ['str', 'skill', 'mag', 'speed', 'def', 'luck', 'res', 'move', 'aid', 'con'];
      for (_i = 0, _len = statTypes.length; _i < _len; _i++) {
        st = statTypes[_i];
        stats.find('.' + st).text(this.unit[st]);
      }
      weaponsEl = stats.find('.weapons').html('');
      _ref = this.unit.wield;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        weaponClass = _ref[_j];
        _results.push($('<div><img src="images/items/' + (new weaponClass()).image + '" /></div>').appendTo(weaponsEl));
      }
      return _results;
    };

    UnitInfoWindow.prototype.hide = function() {
      $('.dark-overlay').hide();
      this.window.css('visibility', 'hidden');
      return this.ui.controlState = new CsMap(this.ui);
    };

    UnitInfoWindow.prototype.changeTab = function(tabId) {
      var labels, oldTabId;
      labels = this.window.find('.tab-container .labels');
      oldTabId = labels.find('.selected').removeClass('selected').find('.tab-id').text();
      this.window.find('.tab-container .tab-content-' + oldTabId).hide();
      labels.find('.tab-label-' + tabId).addClass('selected');
      return this.window.find('.tab-container .tab-content-' + tabId).show();
    };

    return UnitInfoWindow;

  })();

  CsUnitInfoWindow = (function(_super) {
    __extends(CsUnitInfoWindow, _super);

    function CsUnitInfoWindow(ui, windowObj) {
      this.ui = ui;
      this.windowObj = windowObj;
    }

    CsUnitInfoWindow.prototype.d = function() {
      return this.windowObj.hide();
    };

    CsUnitInfoWindow.prototype.left = function() {
      var label, selectedLabel, tabId;
      selectedLabel = this.windowObj.window.find('.tab-container .labels .selected');
      if (selectedLabel.prev().size() === 0) {
        label = selectedLabel.siblings().last();
      } else {
        label = selectedLabel.prev();
      }
      tabId = label.find('.tab-id').text();
      return this.windowObj.changeTab(tabId);
    };

    CsUnitInfoWindow.prototype.right = function() {
      var label, selectedLabel, tabId;
      selectedLabel = this.windowObj.window.find('.tab-container .labels .selected');
      if (selectedLabel.next().size() === 0) {
        label = selectedLabel.siblings().first();
      } else {
        label = selectedLabel.next();
      }
      tabId = label.find('.tab-id').text();
      return this.windowObj.changeTab(tabId);
    };

    return CsUnitInfoWindow;

  })(ControlState);

}).call(this);
