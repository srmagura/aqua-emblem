// Generated by CoffeeScript 1.7.1
(function() {
  var Cursor, UI,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  UI = (function() {
    UI.prototype.tw = 35;

    function UI() {
      this.mainLoop = __bind(this.mainLoop, this);
      this.keydownHandler = __bind(this.keydownHandler, this);
      var skillInfoBoxEl, skillsBoxEl;
      this.then = Date.now();
      this.canvas = $('canvas');
      this.ctx = this.canvas[0].getContext('2d');
      this.canvasDim = new Position(this.canvas.height() / this.tw, this.canvas.width() / this.tw);
      this.origin = new Position(0, 0);
      this.cursor = new Cursor(this);
      this.controlState = new CsMap(this);
      $(window).keydown(this.keydownHandler);
      this.actionMenu = new ActionMenu(this);
      this.weaponMenu = new WeaponMenu(this);
      this.battleStatsPanel = new BattleStatsPanel(this);
      this.expBar = new ExpBar(this);
      skillInfoBoxEl = $('.sidebar .skill-info-box');
      skillInfoBoxEl.clone().appendTo($('.canvas-container'));
      this.skillInfoBox = new SkillInfoBox(this, skillInfoBoxEl);
      skillsBoxEl = $('.sidebar .skills-box');
      skillsBoxEl.addClass('neutral-box');
      this.skillsBox = new SkillsBox(this, skillsBoxEl, this.skillInfoBox);
      this.unitInfoBox = new UnitInfoBox(this, '.sidebar .unit-info');
      this.unitInfoWindow = new UnitInfoWindow(this);
      this.levelUpWindow = new LevelUpWindow(this);
      this.tradeWindow = new TradeWindow(this);
      this.canvasOverlay = new CanvasOverlay(this);
      this.viewportOverlay = new ViewportOverlay(this);
      this.messageBox = new MessageBox(this);
      this.endTurnMenu = new EndTurnMenu(this);
      this.staticTurn = new Turn(this);
    }

    UI.prototype.centerElement = function(el, padding) {
      var css;
      css = {};
      css.top = (this.canvas.height() - el.height()) / 2 - padding;
      css.left = (this.canvas.width() - el.width()) / 2 - padding;
      return css;
    };

    UI.prototype.setChapter = function(chapter) {
      this.chapter = chapter;
      $('.wrapper').css('width', this.canvas.width() + $('.left-sidebar').width() * 2 + 30);
      $('.game-wrapper').css('height', this.canvas.height() + 40);
      $('.victory-condition').text(this.chapter.victoryCondition.text);
      this.terrainBox = new TerrainBox(this);
      this.cursor.moveTo(new Position(0, 0));
      return this.chapter.initTurn(this.chapter.playerTeam);
    };

    UI.prototype.onScreen = function(pos) {
      var delta, _ref, _ref1;
      delta = pos.scale(this.tw).subtract(this.origin);
      return (0 <= (_ref = delta.i) && _ref < this.canvas.height()) && (0 <= (_ref1 = delta.j) && _ref1 < this.canvas.width());
    };

    UI.prototype.scrollTo = function(pos, scrollCallback) {
      var centerOffset, map, maxI, maxJ;
      this.scrollCallback = scrollCallback;
      centerOffset = new Position(5, 6);
      this.scrollDest = pos.subtract(centerOffset);
      map = this.chapter.map;
      maxI = map.height - this.canvasDim.i;
      if (this.scrollDest.i < 0) {
        this.scrollDest.i = 0;
      } else if (this.scrollDest.i > maxI) {
        this.scrollDest.i = maxI;
      }
      maxJ = map.width - this.canvasDim.j;
      if (this.scrollDest.j < 0) {
        this.scrollDest.j = 0;
      } else if (this.scrollDest.j > maxJ) {
        this.scrollDest.j = maxJ;
      }
      this.direction = this.scrollDest.scale(this.tw).subtract(this.origin);
      if (!this.direction.equals(new Position(0, 0))) {
        this.direction = this.direction.toUnitVector();
        return this.scrollSpeed = .2;
      } else {
        return this.direction = null;
      }
    };

    UI.prototype.render = function() {
      if (this.chapter != null) {
        this.chapter.render(this, this.ctx);
      }
      return this.cursor.render(this, this.ctx);
    };

    UI.prototype.keydownHandler = function(e) {
      var _ref;
      switch (e.which) {
        case 38:
          this.controlState.up();
          break;
        case 40:
          this.controlState.down();
          break;
        case 37:
          this.controlState.left();
          break;
        case 39:
          this.controlState.right();
          break;
        case 70:
          this.controlState.f();
          break;
        case 68:
          this.controlState.d();
          break;
        case 83:
          this.controlState.s();
          break;
        case 69:
          this.controlState.e();
      }
      if ((37 <= (_ref = e.which) && _ref <= 40)) {
        e.preventDefault();
        return false;
      }
    };

    UI.prototype.update = function(delta) {
      var alt, unit, _i, _len, _ref, _results;
      if (this.direction != null) {
        this.origin = this.origin.add(this.direction.scale(delta * this.scrollSpeed));
        alt = this.scrollDest.scale(this.tw).subtract(this.origin);
        if (alt.dot(this.direction) <= 0) {
          this.origin = this.scrollDest.scale(this.tw);
          this.direction = null;
          this.scrollCallback();
        }
      }
      _ref = this.chapter.units;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        if (unit.direction != null) {
          if (unit.followingPath && (Math.abs(unit.offset.i) >= this.tw || Math.abs(unit.offset.j) >= this.tw)) {
            _results.push(unit.pathNext());
          } else {
            _results.push(unit.offset = unit.offset.add(unit.direction.scale(delta * unit.movementSpeed)));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    UI.prototype.mainLoop = function() {
      var delta, now;
      now = Date.now();
      delta = now - this.then;
      this.then = now;
      this.update(delta);
      requestAnimationFrame(this.mainLoop);
      return this.render();
    };

    return UI;

  })();

  window.init = function() {
    var chapter;
    window.ui = new UI();
    chapter = new Chapter1(ui);
    ui.setChapter(chapter);
    return ui.mainLoop();
  };

  Cursor = (function() {
    function Cursor(ui) {
      this.ui = ui;
      this.visible = false;
    }

    Cursor.prototype.moveTo = function(pos) {
      var unitAt;
      this.pos = pos.clone();
      this.ui.controlState.moved();
      this.ui.chapter.playerTurn.updateDestination();
      unitAt = this.ui.chapter.getUnitAt(this.pos);
      if (unitAt === null) {
        return this.ui.unitInfoBox.hide();
      } else {
        return this.ui.unitInfoBox.init(unitAt, false, true);
      }
    };

    Cursor.prototype.move = function(di, dj) {
      var c, newPos, newPosPx;
      newPos = this.pos.add(new Position(di, dj));
      newPosPx = newPos.scale(this.ui.tw);
      c = this.ui.canvas;
      if (newPosPx.j >= c.width() + this.ui.origin.j || newPosPx.j < this.ui.origin.j) {
        this.ui.origin.j += dj * this.ui.tw;
      }
      if (newPosPx.i >= c.height() + this.ui.origin.i || newPosPx.i < this.ui.origin.i) {
        this.ui.origin.i += di * this.ui.tw;
      }
      return this.moveTo(newPos);
    };

    Cursor.prototype.render = function(ui, ctx) {
      var s, tw;
      if (!this.visible || (this.pos == null)) {
        return;
      }
      s = 5;
      tw = ui.tw;
      ctx.strokeStyle = 'purple';
      ctx.beginPath();
      ctx.rect(this.pos.j * tw + s - ui.origin.j, this.pos.i * tw + s - ui.origin.i, tw - 2 * s, tw - 2 * s);
      return ctx.stroke();
    };

    return Cursor;

  })();

  window.ControlState = (function() {
    function ControlState(ui) {
      this.ui = ui;
    }

    ControlState.prototype.up = function() {};

    ControlState.prototype.down = function() {};

    ControlState.prototype.left = function() {};

    ControlState.prototype.right = function() {};

    ControlState.prototype.f = function() {};

    ControlState.prototype.d = function() {};

    ControlState.prototype.s = function() {};

    ControlState.prototype.e = function() {};

    ControlState.prototype.moved = function() {};

    return ControlState;

  })();

}).call(this);
