// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ActionMenu = (function() {
    function ActionMenu(ui) {
      this.ui = ui;
      this.menu = $('.action-menu');
    }

    ActionMenu.prototype.init = function(menuItems) {
      var el, item, k, _i, _len;
      this.menuItems = menuItems;
      this.menu.html('');
      for (k = _i = 0, _len = menuItems.length; _i < _len; k = ++_i) {
        item = menuItems[k];
        el = $('<div><div class="image"></div></div>');
        el.data('index', k).append(item.name).appendTo('.action-menu');
      }
      this.menu.children('div').first().addClass('selected');
      this.ui.cursor.visible = false;
      this.ui.controlState = new CsActionMenu(this.ui, this);
      return this.show();
    };

    ActionMenu.prototype.show = function() {
      return this.menu.css('display', 'inline-block');
    };

    ActionMenu.prototype.hide = function() {
      return this.menu.css('display', 'none');
    };

    return ActionMenu;

  })();

  window.ActionMenuItem = (function() {
    function ActionMenuItem(name, handler) {
      this.name = name;
      this.handler = handler;
    }

    return ActionMenuItem;

  })();

  window.CsMenu = (function(_super) {
    __extends(CsMenu, _super);

    function CsMenu(ui, menuObj) {
      this.ui = ui;
      this.menuObj = menuObj;
    }

    CsMenu.prototype.onChange = function() {};

    CsMenu.prototype.up = function() {
      var sel;
      sel = this.menuObj.menu.find('.selected');
      sel.removeClass('selected');
      if (sel.prev().size() !== 0) {
        sel.prev().addClass('selected');
      } else {
        this.menuObj.menu.children('div').last().addClass('selected');
      }
      return this.onChange();
    };

    CsMenu.prototype.down = function() {
      var sel;
      sel = this.menuObj.menu.find('.selected');
      sel.removeClass('selected');
      if (sel.next().size() !== 0) {
        sel.next().addClass('selected');
      } else {
        this.menuObj.menu.children('div').first().addClass('selected');
      }
      return this.onChange();
    };

    return CsMenu;

  })(ControlState);

  window.CsActionMenu = (function(_super) {
    __extends(CsActionMenu, _super);

    function CsActionMenu() {
      return CsActionMenu.__super__.constructor.apply(this, arguments);
    }

    CsActionMenu.prototype.f = function() {
      var k;
      k = this.menuObj.menu.find('.selected').data('index');
      this.menuObj.hide();
      this.ui.controlState = new CsMap(this.ui);
      return this.menuObj.menuItems[k].handler();
    };

    CsActionMenu.prototype.d = function() {
      var ch, unit;
      this.ui.actionMenu.hide();
      this.ui.controlState = new CsMap(this.ui);
      ch = this.ui.chapter;
      unit = ch.playerTurn.selectedUnit;
      unit.pos = unit.oldPos;
      ch.playerTurn.deselect();
      this.ui.cursor.visible = true;
      return this.ui.cursor.moveTo(unit.pos.clone());
    };

    return CsActionMenu;

  })(CsMenu);

}).call(this);
