// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window._enc = {};

  _enc.DELAY = 1500;

  _enc.Encounter = (function() {
    function Encounter(ui, atk, def) {
      this.ui = ui;
      this.atk = atk;
      this.def = def;
      this.encounterDone = __bind(this.encounterDone, this);
      this.doLunge = __bind(this.doLunge, this);
    }

    Encounter.prototype.doEncounter = function(callback) {
      var atkBoxEl, defBoxEl, left, maxI, top, tw;
      this.callback = callback;
      this.container = $('<div></div>');
      this.container.addClass('encounter-container').appendTo('.canvas-container');
      atkBoxEl = $('.sidebar .unit-info').clone();
      defBoxEl = $('.sidebar .unit-info').clone();
      if (this.atk.team instanceof _team.PlayerTeam) {
        this.leftBox = atkBoxEl;
        this.rightBox = defBoxEl;
        this.leftUnit = this.atk;
        this.rightUnit = this.def;
      } else {
        this.leftBox = defBoxEl;
        this.rightBox = atkBoxEl;
        this.leftUnit = this.def;
        this.rightUnit = this.atk;
      }
      this.container.append(this.leftBox).append(this.rightBox);
      this.atkBox = new _cui.UnitInfoBox(this.ui, atkBoxEl);
      this.atkBox.init(this.atk);
      this.atkBox.show();
      this.defBox = new _cui.UnitInfoBox(this.ui, defBoxEl);
      this.defBox.init(this.def);
      this.defBox.show();
      this.midpoint = this.atk.pos.add(this.def.pos).scale(.5);
      tw = this.ui.tw;
      left = this.midpoint.j * tw - this.leftBox.width() + 15 - this.ui.origin.j;
      if (this.atk.pos.i > this.def.pos.i) {
        maxI = this.atk.pos.i;
      } else {
        maxI = this.def.pos.i;
      }
      top = (maxI + 1) * tw - this.ui.origin.i;
      this.container.css({
        left: left,
        top: top
      });
      this.turnIndex = 0;
      this.delay = _enc.DELAY / this.ui.speedMultiplier;
      return setTimeout(this.doAction, this.delay / 5);
    };

    Encounter.prototype.doLunge = function(unit) {
      var halt, other, reverse;
      reverse = (function(_this) {
        return function() {
          return setTimeout(halt, _this.delay / 3);
        };
      })(this);
      halt = (function(_this) {
        return function() {
          return unit.direction = null;
        };
      })(this);
      other = this.getOther(unit);
      unit.direction = other.pos.subtract(unit.pos).toUnitVector();
      unit.movementSpeed = .025;
      return unit.lungeStatus = _unit.LUNGE_STATUS.FORWARD;
    };

    Encounter.prototype.encounterDone = function(doCallback) {
      if (doCallback == null) {
        doCallback = true;
      }
      this.container.remove();
      if (doCallback && (this.callback != null)) {
        return this.callback();
      }
    };

    Encounter.prototype.getOther = function(unit) {
      if (unit === this.atk) {
        return this.def;
      }
      if (unit === this.def) {
        return this.atk;
      }
    };

    return Encounter;

  })();

}).call(this);
