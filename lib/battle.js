// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Battle = (function() {
    function Battle(ui, atk, def) {
      this.ui = ui;
      this.atk = atk;
      this.def = def;
      this.battleDone = __bind(this.battleDone, this);
      this.doLunge = __bind(this.doLunge, this);
      this.doAttack = __bind(this.doAttack, this);
      this.range = this.atk.pos.distance(this.def.pos);
      this.atk.calcCombatStats();
      this.def.calcCombatStats();
      this.calcBattleStats();
    }

    Battle.prototype.calcBattleStats = function(playerWeapon) {
      var _ref;
      if (playerWeapon != null) {
        this.calcIndividual(this.atk, playerWeapon, this.def);
      } else {
        this.calcIndividual(this.atk, this.atk.equipped, this.def);
      }
      this.calcIndividual(this.def, this.def.equipped, this.atk);
      this.turns = [this.atk];
      this.nTurns = {
        atk: 1,
        def: 0
      };
      if (_ref = this.range, __indexOf.call(this.def.equipped.range, _ref) >= 0) {
        this.turns.push(this.def);
        this.nTurns.def++;
      }
      if (this.atk.attackSpeed - 4 > this.def.attackSpeed) {
        this.turns.push(this.atk);
        return this.nTurns.atk++;
      } else if (this.def.attackSpeed - 4 > this.atk.attackSpeed) {
        this.turns.push(this.def);
        return this.nTurns.def++;
      }
    };

    Battle.prototype.calcIndividual = function(unit1, weapon1, unit2) {
      var key, value, _ref, _ref1, _results;
      unit1.battleStats = {};
      if (_ref = this.range, __indexOf.call(weapon1.range, _ref) < 0) {
        return;
      }
      unit1.battleStats.hit = unit1.hit - unit2.evade;
      unit1.battleStats.dmg = unit1.str + weapon1.might - unit2.def;
      unit1.battleStats.crt = unit1.crit - unit2.critEvade;
      _ref1 = unit1.battleStats;
      _results = [];
      for (key in _ref1) {
        value = _ref1[key];
        if (value < 0) {
          unit1.battleStats[key] = 0;
        }
        if ((key === 'hit' || key === 'crt') && value > 100) {
          _results.push(unit1.battleStats[key] = 100);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Battle.prototype.setPlayerWeapon = function(weapon) {
      return this.calcBattleStats(weapon);
    };

    Battle.prototype.doBattle = function(callback) {
      var atkBoxEl, defBoxEl, left, maxI, top, tw;
      this.callback = callback;
      this.container = $(document.createElement('div'));
      this.container.addClass('battle-unit-info-container').appendTo('body');
      atkBoxEl = $('.sidebar .unit-info').clone();
      defBoxEl = $('.sidebar .unit-info').clone();
      if (this.atk.team === this.ui.chapter.playerTeam) {
        this.leftBox = atkBoxEl;
        this.rightBox = defBoxEl;
        this.leftUnit = this.atk;
        this.rightUnit = this.def;
      } else {
        this.leftBox = defBoxEl;
        this.rightBox = atkBoxEl;
        this.leftUnit = this.def;
        this.rightUnit = this.atk;
      }
      this.container.append(this.leftBox).append(this.rightBox);
      this.atkBox = new UnitInfoBox(this.ui, atkBoxEl);
      this.atkBox.populate(this.atk, false);
      this.atkBox.show();
      this.defBox = new UnitInfoBox(this.ui, defBoxEl);
      this.defBox.populate(this.def, false);
      this.defBox.show();
      this.cpos = this.ui.canvas.position();
      this.midpoint = this.atk.pos.add(this.def.pos).scale(.5);
      tw = this.ui.tw;
      left = this.midpoint.j * tw + this.cpos.left - this.leftBox.width() + 15;
      if (this.atk.pos.i > this.def.pos.i) {
        maxI = this.atk.pos.i;
      } else {
        maxI = this.def.pos.i;
      }
      top = (maxI + 1) * tw + this.cpos.top;
      this.container.css({
        left: left,
        top: top
      });
      this.turnIndex = 0;
      this.delay = 1500;
      return setTimeout(this.doAttack, this.delay / 5);
    };

    Battle.prototype.getOther = function(unit) {
      if (unit === this.atk) {
        return this.def;
      }
      if (unit === this.def) {
        return this.atk;
      }
    };

    Battle.prototype.doAttack = function() {
      var callMade, giver, randCrit, randHit, recvr;
      callMade = false;
      giver = this.turns[this.turnIndex];
      recvr = this.getOther(giver);
      this.doLunge(giver);
      randHit = 100 * Math.random();
      if (randHit < giver.battleStats.hit) {
        randCrit = 100 * Math.random();
        if (randCrit < giver.battleStats.crt) {
          this.displayMessage(recvr, 'crit');
          recvr.hp -= 3 * giver.battleStats.dmg;
        } else {
          recvr.hp -= giver.battleStats.dmg;
        }
      } else {
        this.displayMessage(recvr, 'miss');
      }
      if (recvr.hp <= 0) {
        recvr.hp = 0;
        setTimeout(this.battleDone, this.delay);
        callMade = true;
      }
      this.turnIndex++;
      if (!callMade) {
        if (this.turnIndex === this.turns.length) {
          setTimeout(this.battleDone, this.delay);
        } else {
          setTimeout(this.doAttack, this.delay);
        }
      }
      this.atkBox.populate(this.atk, true);
      return this.defBox.populate(this.def, true);
    };

    Battle.prototype.doLunge = function(unit) {
      var halt, other, reverse;
      reverse = (function(_this) {
        return function() {
          unit.direction = unit.direction.scale(-1);
          return setTimeout(halt, _this.delay / 3);
        };
      })(this);
      halt = (function(_this) {
        return function() {
          unit.direction = null;
          return unit.offset = new Position(0, 0);
        };
      })(this);
      other = this.getOther(unit);
      unit.direction = other.pos.subtract(unit.pos).toUnitVector();
      unit.movementSpeed = .025;
      return setTimeout(reverse, this.delay / 3);
    };

    Battle.prototype.battleDone = function() {
      var keepGoing;
      keepGoing = true;
      this.container.remove();
      if (this.atk.hp === 0) {
        keepGoing = this.ui.chapter.kill(this.atk);
      }
      if (this.def.hp === 0) {
        keepGoing = this.ui.chapter.kill(this.def);
      }
      if (keepGoing && (this.callback != null)) {
        return this.callback();
      }
    };

    Battle.prototype.displayMessage = function(overUnit, mtype) {
      var el, left, startFadeOut, top, tw;
      el = $('<div class="battle-message"></div>');
      el.addClass(mtype);
      tw = this.ui.tw;
      if (mtype === 'miss') {
        el.text('Miss');
      } else if (mtype === 'crit') {
        el.text('Crit!');
      }
      top = this.cpos.top + overUnit.pos.i * tw;
      left = this.cpos.left + overUnit.pos.j * tw + tw / 2 - el.width() / 2;
      el.appendTo($('body')).css({
        top: top,
        left: left
      });
      el.fadeIn(this.delay / 5);
      startFadeOut = (function(_this) {
        return function() {
          el.fadeOut(_this.delay / 5);
          return el.remove();
        };
      })(this);
      return setTimeout(startFadeOut, 3 * this.delay / 5);
    };

    return Battle;

  })();

}).call(this);
