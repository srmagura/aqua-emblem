// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _vn.animateText = function(el, text, callback) {
    var char, msPerChar, span, spanI, spans, _i, _len;
    if (callback == null) {
      callback = (function() {});
    }
    msPerChar = 30;
    spans = [];
    el.html('');
    for (_i = 0, _len = text.length; _i < _len; _i++) {
      char = text[_i];
      span = $('<span></span>').text(char);
      span.css('visibility', 'hidden');
      el.append(span);
      spans.push(span);
    }
    spanI = 0;
    return $({
      count: 0
    }).animate({
      count: text.length
    }, {
      duration: text.length * msPerChar,
      step: function() {
        var j, rounded, _j;
        rounded = Math.round(this.count);
        if (rounded >= spanI) {
          for (j = _j = spanI; spanI <= rounded ? _j <= rounded : _j >= rounded; j = spanI <= rounded ? ++_j : --_j) {
            if (j === spans.length) {
              return;
            }
            spans[j].css('visibility', 'visible');
          }
        }
        return spanI = rounded + 1;
      },
      complete: callback
    });
  };

  _vn.animateTextWithArrow = function(el, text, callback) {
    var callback2;
    if (callback == null) {
      callback = (function() {});
    }
    callback2 = (function(_this) {
      return function() {
        var img;
        img = $('<img />').attr('src', 'images/vn/arrow.png');
        img.addClass('vn-arrow').appendTo(el);
        return callback();
      };
    })(this);
    return _vn.animateText(el, text, callback2);
  };

  _vn.FullTextbox = (function() {
    function FullTextbox(ui) {
      this.ui = ui;
      this.done = __bind(this.done, this);
      this.showLine = __bind(this.showLine, this);
      this.wrapper = this.ui.wrapper.find('.full-textbox');
      this.box = this.wrapper.find('.box');
      this.fadeDelay = 1000;
    }

    FullTextbox.prototype.init = function(pages, callback) {
      this.pages = pages;
      this.callback = callback;
      this.ui.controlState = new _cs.vn.FullTextbox(this.ui, this);
      this.callbackMade = false;
      this.box.html('');
      this.pageIndex = 0;
      this.lineIndex = 0;
      return this.wrapper.fadeIn(this.fadeDelay, this.showLine);
    };

    FullTextbox.prototype.showLine = function() {
      var callback, el, lines;
      if (this.callbackMade) {
        return;
      }
      callback = (function(_this) {
        return function() {
          if (!_this.callbackMade) {
            return _this.ui.controlState = new _cs.vn.FullTextboxWaiting(_this.ui, _this);
          }
        };
      })(this);
      this.box.find('.line').last().find('.vn-arrow').css('visibility', 'hidden');
      this.ui.controlState = new _cs.vn.FullTextbox(this.ui, this);
      lines = this.pages[this.pageIndex];
      if (this.lineIndex === lines.length) {
        if (this.pageIndex === this.pages.length - 1) {
          this.wrapper.fadeOut(this.fadeDelay, this.done);
          return;
        } else {
          this.pageIndex++;
          this.box.html('');
          lines = this.pages[this.pageIndex];
          this.lineIndex = 0;
        }
      }
      el = $('<div></div>').addClass('line').appendTo(this.box);
      return _vn.animateTextWithArrow(el, lines[this.lineIndex++], callback);
    };

    FullTextbox.prototype.skip = function() {
      this.wrapper.hide();
      return this.done();
    };

    FullTextbox.prototype.done = function() {
      if (!this.callbackMade) {
        this.callbackMade = true;
        return this.callback();
      }
    };

    return FullTextbox;

  })();

  _cs.vn.FullTextbox = (function(_super) {
    __extends(FullTextbox, _super);

    function FullTextbox(ui, boxObj) {
      this.ui = ui;
      this.boxObj = boxObj;
    }

    FullTextbox.prototype.v = function() {
      return this.boxObj.skip();
    };

    return FullTextbox;

  })(_cs.ControlState);

  _cs.vn.FullTextboxWaiting = (function(_super) {
    __extends(FullTextboxWaiting, _super);

    function FullTextboxWaiting() {
      return FullTextboxWaiting.__super__.constructor.apply(this, arguments);
    }

    FullTextboxWaiting.prototype.f = function() {
      return this.boxObj.showLine();
    };

    return FullTextboxWaiting;

  })(_cs.vn.FullTextbox);

}).call(this);
