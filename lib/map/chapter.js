// Generated by CoffeeScript 1.7.1
(function() {
  _map.VICTORY_CONDITION = {
    ROUT: {
      text: 'Defeat all enemies'
    }
  };

  _map.Chapter = (function() {
    function Chapter(ui, map) {
      this.ui = ui;
      this.map = map;
      this.done = false;
      this.initUnits();
      this.map.ui = this.ui;
      this.playerTurn = new _turn.PlayerTurn(this.ui);
      this.enemyTurn = new _turn.EnemyTurn(this.ui);
    }

    Chapter.prototype.initUnits = function() {
      var bonus, k, stat, unit, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      this.units = [];
      _ref = this.playerTeam.units;
      for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
        unit = _ref[k];
        unit.pos = this.map.playerPositions[k];
        this.units.push(unit);
        unit.team = this.playerTeam;
        bonus = this.ui.file.difficulty.statBonus;
        for (stat in unit.startStats) {
          if (stat !== 'move') {
            unit.startStats[stat] += bonus;
          }
        }
        unit.calcStatsInitial();
      }
      _ref1 = this.enemyTeam.units;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        unit = _ref1[_j];
        this.units.push(unit);
        unit.team = this.enemyTeam;
      }
      _ref2 = this.units;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        unit = _ref2[_k];
        _results.push(unit.ui = this.ui);
      }
      return _results;
    };

    Chapter.prototype.getUnitAt = function(pos) {
      var unit, _i, _len, _ref;
      _ref = this.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        if (unit.pos.equals(pos)) {
          return unit;
        }
      }
      return null;
    };

    Chapter.prototype.kill = function(unit) {
      var removeFrom;
      removeFrom = function(array) {
        var k, u, _i, _len, _results;
        _results = [];
        for (k = _i = 0, _len = array.length; _i < _len; k = ++_i) {
          u = array[k];
          if (u === unit) {
            array.splice(k, 1);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      removeFrom(this.units);
      removeFrom(unit.team.units);
      if (unit.team instanceof _team.PlayerTeam) {
        this.defeat();
        return false;
      }
      return !this.checkConditions();
    };

    Chapter.prototype.checkConditions = function() {
      var victory;
      victory = false;
      if (this.victoryCondition === _map.VICTORY_CONDITION.ROUT) {
        victory = this.enemyTeam.units.length === 0;
      }
      if (victory) {
        this.ui.messageBox.showVictoryMessage();
        this.ui.unitInfoBox.hide();
        this.done = true;
        return true;
      } else {
        return false;
      }
    };

    Chapter.prototype.defeat = function() {
      this.done = true;
      this.ui.unitInfoBox.hide();
      return this.ui.messageBox.showDefeatMessage();
    };

    Chapter.prototype.initTurn = function(team) {
      var callback, unit, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        unit.done = false;
      }
      this.ui.controlState = new _cs.cui.Chapter(this.ui);
      if (team instanceof _team.PlayerTeam) {
        if ((this.ui.cursor.pos != null) && !this.ui.onScreen(this.ui.cursor.pos)) {
          this.ui.scrollTo(this.ui.cursor.pos);
        }
        _ref1 = this.units;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          unit = _ref1[_j];
          unit.onNewTurn();
        }
      } else {
        this.ui.cursor.visible = false;
        this.ui.unitInfoBox.hide();
        this.ui.terrainBox.hide();
      }
      callback = (function(_this) {
        return function(team) {
          var _k, _len2, _ref2;
          if (team === _this.enemyTeam) {
            return _this.enemyTurn.doTurn();
          } else {
            if (_this.ui.cursor.pos == null) {
              _ref2 = team.units;
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                unit = _ref2[_k];
                if (unit.id === 'ace') {
                  _this.ui.cursor.moveTo(unit.pos);
                  break;
                }
              }
            }
            _this.ui.cursor.visible = true;
            _this.ui.cursor.moveTo(_this.ui.cursor.pos);
            return _this.ui.controlState = new _cs.cui.Map(_this.ui);
          }
        };
      })(this);
      return this.ui.messageBox.showPhaseMessage(team, callback);
    };

    Chapter.prototype.checkAllDone = function() {
      var allDone, unit, _i, _len, _ref;
      allDone = true;
      _ref = this.playerTeam.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        if (!unit.done) {
          allDone = false;
          break;
        }
      }
      if (allDone) {
        return this.initTurn(this.enemyTeam);
      }
    };

    Chapter.prototype.getUnitAt = function(pos) {
      var unit, _i, _len, _ref;
      _ref = this.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        if (unit.pos.equals(pos)) {
          return unit;
        }
      }
      return null;
    };

    Chapter.prototype.render = function(ui, ctx) {
      var unit, _i, _len, _ref, _results;
      this.map.render(ui, ctx);
      if (this.playerTurn.dest != null) {
        this.playerTurn.dest.render(ui, ctx);
      }
      _ref = this.units;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        _results.push(unit.render(ui, ctx));
      }
      return _results;
    };

    return Chapter;

  })();

}).call(this);
