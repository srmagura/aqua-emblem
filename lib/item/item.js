// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window._item = {};

  _item.uses = {
    steel: 30,
    killer: 20
  };

  _item.Item = (function() {
    function Item() {
      this.drop = false;
    }

    Item.prototype.letDrop = function() {
      this.drop = true;
      return this;
    };

    Item.prototype.hasUses = function(n) {
      return this.uses === null || this.uses >= n;
    };

    Item.prototype.getElement = function(options) {
      var el, html, src;
      if (options == null) {
        options = {};
      }
      el = $('<div class="item-element"></div>');
      html = this.name;
      if ('equipped' in options && options.equipped) {
        html += ' <span class="equipped">(E)</span>';
      }
      if ('usable' in options && !options.usable) {
        el.addClass('not-usable');
      }
      if (this.drop) {
        el.addClass('drop');
      }
      src = this.getImagePath();
      el.append($("<img src='" + src + "' />"));
      el.append($("<span class='text'>" + html + "</span>"));
      if ((this.uses != null) && !('showUses' in options && !options.showUses)) {
        el.append($("<div class='uses'>" + this.uses + "</div>"));
      }
      el.data('item', this);
      return el;
    };

    Item.prototype.getImagePath = function() {
      return "images/items/" + this.image;
    };

    Item.prototype.pickle = function() {
      var obj;
      obj = {
        constructor: _util.getFunctionName(this.constructor)
      };
      if (this.uses != null) {
        obj.uses = this.uses;
      }
      return obj;
    };

    Item.unpickle = function(pickled) {
      var constructor, item;
      if (pickled.constructor in _item) {
        constructor = _item[pickled.constructor];
        item = new constructor();
      } else {
        return null;
      }
      if ('uses' in pickled) {
        item.uses = pickled.uses;
      }
      return item;
    };

    return Item;

  })();

  _item.Weapon = (function(_super) {
    __extends(Weapon, _super);

    function Weapon() {
      this.crit = 0;
      this.uses = null;
      Weapon.__super__.constructor.call(this);
    }

    return Weapon;

  })(_item.Item);

  _item.Sword = (function(_super) {
    __extends(Sword, _super);

    function Sword() {
      this.type = new _skill.type.Sword();
      this.image = 'iron_sword.png';
      this.range = new Range(1);
      Sword.__super__.constructor.call(this);
    }

    return Sword;

  })(_item.Weapon);

  _item.Lance = (function(_super) {
    __extends(Lance, _super);

    function Lance() {
      this.type = new _skill.type.Lance();
      this.image = 'iron_lance.png';
      this.range = new Range(1);
      Lance.__super__.constructor.call(this);
    }

    return Lance;

  })(_item.Weapon);

  _item.Axe = (function(_super) {
    __extends(Axe, _super);

    function Axe() {
      this.type = new _skill.type.Axe();
      this.image = 'iron_axe.png';
      this.range = new Range(1);
      Axe.__super__.constructor.call(this);
    }

    return Axe;

  })(_item.Weapon);

  _item.Bow = (function(_super) {
    __extends(Bow, _super);

    function Bow() {
      this.type = new _skill.type.Bow();
      this.image = 'iron_bow.png';
      this.range = new Range(2);
      Bow.__super__.constructor.call(this);
    }

    return Bow;

  })(_item.Weapon);

}).call(this);
