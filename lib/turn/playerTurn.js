// Generated by CoffeeScript 1.12.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _turn.PlayerTurn = (function(superClass) {
    extend(PlayerTurn, superClass);

    function PlayerTurn(ui) {
      this.ui = ui;
      this.afterExpAdd = bind(this.afterExpAdd, this);
      this.handleTrade = bind(this.handleTrade, this);
      this.skillsBoxOnCursorMove = bind(this.skillsBoxOnCursorMove, this);
      this.skillsBoxOnF = bind(this.skillsBoxOnF, this);
      this.skillsBoxOnD = bind(this.skillsBoxOnD, this);
      this.handleSkill = bind(this.handleSkill, this);
      this.handleAttack = bind(this.handleAttack, this);
      this.handleItems = bind(this.handleItems, this);
      this.handleWait = bind(this.handleWait, this);
      this.initActionMenu = bind(this.initActionMenu, this);
      this.afterPathFollow = bind(this.afterPathFollow, this);
      PlayerTurn.__super__.constructor.call(this, this.ui);
      this.tradeRange = new Range(1);
    }

    PlayerTurn.prototype.select = function(unit) {
      var attackRange, i, j, len, len1, ref, spot;
      this.origin0 = this.ui.origin.clone();
      this.available = this.getAvailable(unit);
      attackRange = this.movementGetAttackRange(this.available, unit);
      for (i = 0, len = attackRange.length; i < len; i++) {
        spot = attackRange[i];
        this.ui.chapter.map.setOverlay(spot.targetSpot, 'ATTACK');
      }
      ref = this.available;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        spot = ref[j];
        this.ui.chapter.map.setOverlay(spot.pos, 'AVAILABLE');
      }
      if (unit.team instanceof _team.PlayerTeam) {
        this.selectedUnit = unit;
        this.dest = new _map.Destination();
        return this.updateDestination();
      } else {
        this.selectedEnemy = unit;
        return this.ui.controlState = new _cs.chapterui.EnemySelected(this.ui);
      }
    };

    PlayerTurn.prototype.deselect = function() {
      if (this.selectedUnit) {
        this.ui.origin = this.origin0;
        this.ui.cursor.pos = this.selectedUnit.pos.clone();
      }
      this.selectedUnit = null;
      this.selectedEnemy = null;
      this.dest = null;
      return this.ui.chapter.map.clearOverlay();
    };

    PlayerTurn.prototype.updateDestination = function() {
      var cp, i, len, ref, results, spot;
      cp = this.ui.cursor.pos;
      if (this.ui.chapter.map.overlayTiles[cp.i][cp.j] === _map.OVERLAY_TYPES.AVAILABLE && (this.selectedUnit != null)) {
        this.dest.pos = cp.clone();
        ref = this.available;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          spot = ref[i];
          if (spot.pos.equals(cp)) {
            this.dest.path = spot.path;
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    PlayerTurn.prototype.initMove = function() {
      var unitAtDest;
      unitAtDest = this.ui.chapter.getUnitAt(this.dest.pos);
      if (unitAtDest !== null && unitAtDest !== this.selectedUnit) {
        return;
      }
      this.selectedUnit.oldPos = this.selectedUnit.pos;
      this.ui.chapter.map.clearOverlay();
      this.ui.cursor.visible = false;
      this.ui.controlState = new _cs.chapterui.Chapter(this.ui);
      this.selectedUnit.followPath(this.dest.path, this.afterPathFollow);
      return this.dest = null;
    };

    PlayerTurn.prototype.afterPathFollow = function() {
      this.ui.unitInfoBox.init(this.selectedUnit, false, true);
      this.ui.unitInfoBox.show();
      return this.initActionMenu();
    };

    PlayerTurn.prototype.initActionMenu = function() {
      var actions, attackRange, i, j, len, len1, obj, pos, ref, target;
      attackRange = this.getAttackRange(this.selectedUnit, this.selectedUnit.pos);
      this.inAttackRange = [];
      for (i = 0, len = attackRange.length; i < len; i++) {
        obj = attackRange[i];
        target = this.ui.chapter.getUnitAt(obj.targetSpot);
        if ((target != null) && target.team !== this.selectedUnit.team) {
          this.inAttackRange.push(target);
        }
      }
      this.inTradeRange = [];
      ref = this.getActionRange(this.selectedUnit.pos, this.tradeRange);
      for (j = 0, len1 = ref.length; j < len1; j++) {
        pos = ref[j];
        target = this.ui.chapter.getUnitAt(pos);
        if ((target != null) && target.team === this.selectedUnit.team) {
          this.inTradeRange.push(target);
        }
      }
      actions = [];
      if (this.inAttackRange.length !== 0) {
        actions.push(new _chapterui.ActionMenuItem('Attack', this.handleAttack));
      }
      actions.push(new _chapterui.ActionMenuItem('Skill', this.handleSkill));
      if (this.inTradeRange.length !== 0) {
        actions.push(new _chapterui.ActionMenuItem('Trade', this.handleTrade));
      }
      if (this.selectedUnit.inventory.size() !== 0) {
        actions.push(new _chapterui.ActionMenuItem('Items', this.handleItems));
      }
      actions.push(new _chapterui.ActionMenuItem('Wait', this.handleWait));
      return this.ui.actionMenu.init(this.selectedUnit, actions);
    };

    PlayerTurn.prototype.handleWait = function() {
      this.ui.cursor.visible = true;
      this.selectedUnit.setDone();
      return this.deselect();
    };

    PlayerTurn.prototype.handleItems = function() {
      return this.ui.itemMenu.init({
        playerTurn: this
      });
    };

    PlayerTurn.prototype.handleAttack = function() {
      this.ui.actionMenu.hide();
      return this.ui.weaponMenu.init(this);
    };

    PlayerTurn.prototype.handleSkill = function(resetCursor) {
      if (resetCursor == null) {
        resetCursor = true;
      }
      this.ui.skillsBox.resetCursor = resetCursor;
      this.ui.skillsBox.init(this.selectedUnit, this.skillsBoxOnD, this.skillsBoxOnCursorMove);
      this.ui.skillsBox.onF = this.skillsBoxOnF;
      return this.ui.skillsBox.giveControl(resetCursor);
    };

    PlayerTurn.prototype.skillsBoxOnD = function() {
      this.ui.skillsBox.hide();
      return this.ui.actionMenu.init(this.selectedUnit);
    };

    PlayerTurn.prototype.skillsBoxOnF = function() {
      var skill;
      skill = this.ui.skillsBox.getSkill();
      if (!this.selectedUnit.canUseSkill(skill)) {
        return;
      }
      this.ui.skillsBox.hide();
      this.ui.skillInfoBox.init(skill, true, false);
      this.ui.controlState = skill.getControlState(this.ui, this);
      return this.ui.cursor.visible = true;
    };

    PlayerTurn.prototype.skillsBoxOnCursorMove = function() {
      var skill;
      skill = this.ui.skillsBox.getSkill();
      if (this.selectedUnit.mp < skill.mp) {
        return this.ui.chapter.map.clearOverlay();
      } else {
        return this.setSkillOverlay(skill);
      }
    };

    PlayerTurn.prototype.setSkillOverlay = function(skill) {
      return this.ui.chapter.map.setOverlayRange(this.selectedUnit.pos, skill.range, skill.overlayType);
    };

    PlayerTurn.prototype.handleTrade = function() {
      this.ui.chapter.map.setOverlayRange(this.selectedUnit.pos, this.tradeRange, 'AID');
      this.ui.controlState = new _cs.chapterui.ChooseTradeTarget(this.ui, this);
      this.ui.cursor.visible = true;
      return this.ui.cursor.moveTo(this.inTradeRange[0].pos);
    };

    PlayerTurn.prototype.afterExpAdd = function() {
      this.ui.controlState = new _cs.chapterui.Map(this.ui);
      this.ui.cursor.visible = true;
      this.ui.cursor.moveTo(this.selectedUnit.pos);
      this.selectedUnit.setDone();
      return this.selectedUnit = null;
    };

    return PlayerTurn;

  })(_turn.Turn);

}).call(this);
