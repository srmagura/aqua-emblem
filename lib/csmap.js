// Generated by CoffeeScript 1.7.1
(function() {
  var CsMapAbstract,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CsMapAbstract = (function(_super) {
    __extends(CsMapAbstract, _super);

    function CsMapAbstract() {
      return CsMapAbstract.__super__.constructor.apply(this, arguments);
    }

    CsMapAbstract.prototype.up = function() {
      if (this.ui.cursor.pos.i - 1 >= 0) {
        return this.ui.cursor.move(-1, 0);
      }
    };

    CsMapAbstract.prototype.down = function() {
      if (this.ui.cursor.pos.i + 1 < this.ui.chapter.map.height) {
        return this.ui.cursor.move(1, 0);
      }
    };

    CsMapAbstract.prototype.left = function() {
      if (this.ui.cursor.pos.j - 1 >= 0) {
        return this.ui.cursor.move(0, -1);
      }
    };

    CsMapAbstract.prototype.right = function() {
      if (this.ui.cursor.pos.j + 1 < this.ui.chapter.map.width) {
        return this.ui.cursor.move(0, 1);
      }
    };

    CsMapAbstract.prototype.s = function() {
      var unit;
      unit = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
      if (unit != null) {
        return this.ui.unitInfoWindow.init(unit);
      }
    };

    CsMapAbstract.prototype.moved = function() {
      return this.ui.terrainBox.init();
    };

    return CsMapAbstract;

  })(ControlState);

  window.CsMap = (function(_super) {
    __extends(CsMap, _super);

    function CsMap() {
      return CsMap.__super__.constructor.apply(this, arguments);
    }

    CsMap.prototype.f = function() {
      var pt, unit;
      pt = this.ui.chapter.playerTurn;
      if (pt.selectedUnit == null) {
        unit = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
        if ((unit != null) && unit.team === this.ui.chapter.playerTeam && !unit.done) {
          return pt.select(unit);
        }
      } else if (pt.dest.pos.equals(this.ui.cursor.pos)) {
        return pt.initMove();
      }
    };

    CsMap.prototype.d = function() {
      return this.ui.chapter.playerTurn.deselect();
    };

    CsMap.prototype.e = function() {
      return this.ui.endTurnMenu.init();
    };

    return CsMap;

  })(CsMapAbstract);

  window.CsMapTarget = (function(_super) {
    __extends(CsMapTarget, _super);

    function CsMapTarget(ui, playerTurn) {
      this.ui = ui;
      this.playerTurn = playerTurn;
    }

    return CsMapTarget;

  })(CsMapAbstract);

  window.CsChooseAttackTarget = (function(_super) {
    __extends(CsChooseAttackTarget, _super);

    function CsChooseAttackTarget() {
      return CsChooseAttackTarget.__super__.constructor.apply(this, arguments);
    }

    CsChooseAttackTarget.prototype.moved = function() {
      var target;
      CsChooseAttackTarget.__super__.moved.call(this);
      target = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
      if (target !== null && __indexOf.call(this.playerTurn.inAttackRange, target) >= 0) {
        this.playerTurn.battle = new Battle(this.ui, this.playerTurn.selectedUnit, target);
        return this.ui.battleStatsPanel.init(this.playerTurn.battle);
      } else {
        this.playerTurn.battle = null;
        return this.ui.battleStatsPanel.hide();
      }
    };

    CsChooseAttackTarget.prototype.f = function() {
      if (this.playerTurn.battle != null) {
        this.ui.cursor.visible = false;
        this.ui.chapter.map.clearOverlay();
        this.ui.battleStatsPanel.hide();
        this.ui.unitInfoBox.hide();
        this.ui.terrainBox.hide();
        this.playerTurn.battle.doBattle(this.playerTurn.afterBattle);
        return this.ui.controlState = new ControlState(this.ui);
      }
    };

    CsChooseAttackTarget.prototype.d = function() {
      this.ui.actionMenu.show();
      this.playerTurn.battle = null;
      this.ui.battleStatsPanel.hide();
      this.ui.cursor.moveTo(this.playerTurn.selectedUnit.pos);
      return this.ui.controlState = new CsActionMenu(this.ui, this.ui.actionMenu);
    };

    return CsChooseAttackTarget;

  })(CsMapTarget);

  window.CsChooseTradeTarget = (function(_super) {
    __extends(CsChooseTradeTarget, _super);

    function CsChooseTradeTarget() {
      return CsChooseTradeTarget.__super__.constructor.apply(this, arguments);
    }

    CsChooseTradeTarget.prototype.f = function() {
      var callback, target;
      callback = (function(_this) {
        return function(tradeMade) {
          if (tradeMade) {
            _this.playerTurn.selectedUnit.setDone();
            _this.playerTurn.deselect();
            return _this.ui.controlState = new CsMap(_this.ui);
          }
        };
      })(this);
      target = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
      if (target !== null && __indexOf.call(this.playerTurn.inTradeRange, target) >= 0) {
        return this.ui.tradeWindow.init(this.playerTurn.selectedUnit, target, callback);
      }
    };

    CsChooseTradeTarget.prototype.d = function() {
      this.ui.actionMenu.init(this.playerTurn.selectedUnit);
      this.ui.cursor.moveTo(this.playerTurn.selectedUnit.pos);
      return this.ui.controlState = new CsActionMenu(this.ui, this.ui.actionMenu);
    };

    return CsChooseTradeTarget;

  })(CsMapTarget);

}).call(this);
