// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.CsMap = (function(_super) {
    __extends(CsMap, _super);

    function CsMap() {
      return CsMap.__super__.constructor.apply(this, arguments);
    }

    CsMap.prototype.up = function() {
      if (this.ui.cursor.pos.i - 1 >= 0) {
        return this.ui.cursor.move(-1, 0);
      }
    };

    CsMap.prototype.down = function() {
      if (this.ui.cursor.pos.i + 1 < this.ui.chapter.map.height) {
        return this.ui.cursor.move(1, 0);
      }
    };

    CsMap.prototype.left = function() {
      if (this.ui.cursor.pos.j - 1 >= 0) {
        return this.ui.cursor.move(0, -1);
      }
    };

    CsMap.prototype.right = function() {
      if (this.ui.cursor.pos.j + 1 < this.ui.chapter.map.width) {
        return this.ui.cursor.move(0, 1);
      }
    };

    CsMap.prototype.f = function() {
      var pt, unit;
      pt = this.ui.chapter.playerTurn;
      if (pt.selectedUnit == null) {
        unit = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
        if ((unit != null) && unit.team === this.ui.chapter.playerTeam && !unit.done) {
          return pt.select(unit);
        }
      } else if (pt.dest.pos.equals(this.ui.cursor.pos)) {
        return pt.initMove();
      }
    };

    CsMap.prototype.d = function() {
      return this.ui.chapter.playerTurn.deselect();
    };

    CsMap.prototype.s = function() {
      var unit;
      unit = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
      if (unit != null) {
        return this.ui.unitInfoWindow.init(unit);
      }
    };

    return CsMap;

  })(ControlState);

  window.CsChooseTarget = (function(_super) {
    __extends(CsChooseTarget, _super);

    function CsChooseTarget(ui, playerTurn) {
      this.ui = ui;
      this.playerTurn = playerTurn;
    }

    CsChooseTarget.prototype.f = function() {
      var target;
      target = this.ui.chapter.getUnitAt(this.ui.cursor.pos);
      if (target !== null && __indexOf.call(this.playerTurn.inRange, target) >= 0) {
        this.playerTurn.battle = new Battle(this.ui, this.playerTurn.selectedUnit, target);
        this.ui.weaponMenu.init(this.playerTurn);
        return this.ui.battleStatsPanel.init(this.playerTurn.battle);
      }
    };

    CsChooseTarget.prototype.d = function() {
      this.ui.actionMenu.show();
      this.ui.controlState = new CsActionMenu(this.ui, this.ui.actionMenu);
      return this.ui.cursor.moveTo(this.playerTurn.selectedUnit.pos);
    };

    return CsChooseTarget;

  })(CsMap);

}).call(this);
