// Generated by CoffeeScript 1.12.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window._chapterui = {};

  _cs.chapterui = {};

  _chapterui.ChapterUI = (function(superClass) {
    extend(ChapterUI, superClass);

    ChapterUI.prototype.tw = 35;

    function ChapterUI(file) {
      var skillInfoBoxEl, skillsBoxEl;
      this.file = file;
      this.mainLoop = bind(this.mainLoop, this);
      this.doneDefeat = bind(this.doneDefeat, this);
      this.doneVictory = bind(this.doneVictory, this);
      ChapterUI.__super__.constructor.call(this);
      this.setConfirmUnload(true);
      this.expMultiplier = 1.33;
      this.speedMultiplier = 1;
      this.fadeDelay = 1000;
      this.gameWrapper = $('.game-wrapper');
      this.then = Date.now();
      this.canvas = $('canvas');
      this.ctx = this.canvas[0].getContext('2d');
      this.canvasDim = new Position(10, 12);
      this.cursor = new _chapterui.Cursor(this);
      this.controlState = new _cs.chapterui.Chapter(this);
      this.actionMenu = new _chapterui.ActionMenuMain(this);
      this.weaponMenu = new _chapterui.WeaponMenu(this);
      this.itemMenu = new _chapterui.ItemMenu(this);
      this.battleStatsPanel = new _chapterui.BattleStatsPanel(this);
      this.expBar = new _chapterui.ExpBar(this);
      skillInfoBoxEl = $('.sidebar .skill-info-box');
      skillInfoBoxEl.clone().appendTo($('.canvas-container'));
      this.skillInfoBox = new _chapterui.SkillInfoBox(this, skillInfoBoxEl);
      skillsBoxEl = $('.sidebar .skills-box');
      skillsBoxEl.addClass('neutral-box');
      this.skillsBox = new _chapterui.SkillsBox(this, skillsBoxEl, this.skillInfoBox);
      this.unitInfoBox = new _chapterui.UnitInfoBox(this, '.sidebar .unit-info');
      this.unitInfoWindow = new _chapterui.UnitInfoWindow(this);
      this.levelUpWindow = new _chapterui.LevelUpWindow(this);
      this.tradeWindow = new _chapterui.TradeWindow(this);
      this.canvasOverlay = new _chapterui.CanvasOverlay(this);
      this.viewportOverlay = new _chapterui.ViewportOverlay(this);
      this.messageBox = new _chapterui.MessageBox(this);
      this.endTurnMenu = new _chapterui.EndTurnMenu(this);
      this.terrainBox = new _chapterui.TerrainBox(this);
      this.speedMultiplierBox = $('.speed-multiplier-box').hide();
      this.staticTurn = new _turn.Turn(this);
    }

    ChapterUI.prototype.setChapter = function(chapterCls) {
      this.chapter = new chapterCls(this);
      this.chapter.setPlayerTeam(this.file.playerTeam);
      $('.victory-condition').text(this.chapter.victoryCondition.text).show();
      this.origin = this.chapter.origin0;
      return this.mainLoop();
    };

    ChapterUI.prototype.startChapter = function(callback1, devMode) {
      var afterFade, afterScroll;
      this.callback = callback1;
      if (devMode == null) {
        devMode = false;
      }
      afterFade = (function(_this) {
        return function() {
          return _this.chapter.doScrollSequence(afterScroll);
        };
      })(this);
      afterScroll = (function(_this) {
        return function() {
          return _this.chapter.initTurn(_this.chapter.playerTeam);
        };
      })(this);
      if (!devMode) {
        return this.gameWrapper.fadeIn(this.fadeDelay, afterFade);
      } else {
        this.gameWrapper.show();
        this.origin = new Position(0, 0);
        return afterScroll();
      }
    };

    ChapterUI.prototype.doneVictory = function() {
      return this.destroy(init);
    };

    ChapterUI.prototype.doneDefeat = function() {
      return this.destroy(init);
    };

    ChapterUI.prototype.destroy = function(callback) {
      return this.gameWrapper.fadeOut(this.fadeDelay, callback);
    };

    ChapterUI.prototype.onScreen = function(pos) {
      var delta, ref, ref1;
      delta = pos.scale(this.tw).subtract(this.origin);
      return (0 <= (ref = delta.i) && ref < this.canvas.height()) && (0 <= (ref1 = delta.j) && ref1 < this.canvas.width());
    };

    ChapterUI.prototype.scrollTo = function(pos, scrollCallback, scrollSpeed) {
      var centerOffset, map, maxI, maxJ;
      this.scrollCallback = scrollCallback;
      this.scrollSpeed = scrollSpeed != null ? scrollSpeed : null;
      centerOffset = new Position(5, 6);
      this.scrollDest = pos.subtract(centerOffset);
      map = this.chapter.map;
      maxI = map.height - this.canvasDim.i;
      if (this.scrollDest.i < 0) {
        this.scrollDest.i = 0;
      } else if (this.scrollDest.i > maxI) {
        this.scrollDest.i = maxI;
      }
      maxJ = map.width - this.canvasDim.j;
      if (this.scrollDest.j < 0) {
        this.scrollDest.j = 0;
      } else if (this.scrollDest.j > maxJ) {
        this.scrollDest.j = maxJ;
      }
      this.direction = this.scrollDest.scale(this.tw).subtract(this.origin);
      if (!this.direction.equals(new Position(0, 0))) {
        this.direction = this.direction.toUnitVector();
        if (this.scrollSpeed == null) {
          return this.scrollSpeed = .2;
        }
      } else {
        return this.direction = null;
      }
    };

    ChapterUI.prototype.centerElement = function(el, padding) {
      var css;
      css = {};
      css.top = (this.canvas.height() - el.height()) / 2 - padding;
      css.left = (this.canvas.width() - el.width()) / 2 - padding;
      return css;
    };

    ChapterUI.prototype.render = function() {
      if (this.chapter != null) {
        this.chapter.render(this, this.ctx);
      }
      return this.cursor.render(this, this.ctx);
    };

    ChapterUI.prototype.update = function(delta) {
      var alt, i, len, ref, results, unit;
      delta *= this.speedMultiplier;
      if (this.direction != null) {
        this.origin = this.origin.add(this.direction.scale(delta * this.scrollSpeed));
        alt = this.scrollDest.scale(this.tw).subtract(this.origin);
        if (alt.dot(this.direction) <= 0) {
          this.origin = this.scrollDest.scale(this.tw);
          this.direction = null;
          if (this.scrollCallback != null) {
            this.scrollCallback();
          }
        }
      }
      ref = this.chapter.units;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        unit.updateLunge();
        if (unit.direction != null) {
          if (unit.followingPath && (Math.abs(unit.offset.i) >= this.tw || Math.abs(unit.offset.j) >= this.tw)) {
            results.push(unit.pathNext());
          } else {
            results.push(unit.offset = unit.offset.add(unit.direction.scale(delta * unit.movementSpeed)));
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ChapterUI.prototype.mainLoop = function() {
      var delta, now;
      now = Date.now();
      delta = now - this.then;
      this.then = now;
      this.update(delta);
      requestAnimationFrame(this.mainLoop);
      return this.render();
    };

    return ChapterUI;

  })(UI);

  _cs.chapterui.Chapter = (function(superClass) {
    extend(Chapter, superClass);

    function Chapter(ui) {
      this.ui = ui;
      this.v = bind(this.v, this);
    }

    Chapter.prototype.up = function() {};

    Chapter.prototype.down = function() {};

    Chapter.prototype.left = function() {};

    Chapter.prototype.right = function() {};

    Chapter.prototype.f = function() {};

    Chapter.prototype.d = function() {};

    Chapter.prototype.s = function() {};

    Chapter.prototype.e = function() {};

    Chapter.prototype.v = function() {
      if (this.ui.speedMultiplier === 3) {
        this.ui.speedMultiplier = 1;
        return this.ui.speedMultiplierBox.hide();
      } else {
        this.ui.speedMultiplier = 3;
        return this.ui.speedMultiplierBox.show();
      }
    };

    return Chapter;

  })(_cs.ControlState);

}).call(this);
