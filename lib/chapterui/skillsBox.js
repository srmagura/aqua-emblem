// Generated by CoffeeScript 1.12.2
(function() {
  var HEIGHT, WIDTH,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  WIDTH = 4;

  HEIGHT = 4;

  _chapterui.SkillsBox = (function() {
    function SkillsBox(ui, box, skillInfoBox) {
      this.ui = ui;
      this.box = box;
      this.skillInfoBox = skillInfoBox;
    }

    SkillsBox.prototype.init = function(unit, onD, onCursorMove) {
      var i, img, k, ref, skill, td, tr;
      this.unit = unit;
      this.onD = onD;
      this.onCursorMove = onCursorMove;
      this.box.html('');
      for (i = k = 0, ref = this.unit.skills.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        if (i % WIDTH === 0) {
          tr = $('<tr></tr>').appendTo(this.box);
        }
        td = $('<td></td>').appendTo(tr);
        td.addClass('skill');
        skill = this.unit.skills[i];
        if (this.unit.mp < skill.mp) {
          td.addClass('not-usable');
        }
        img = $('<img />').attr('src', skill.getImagePath()).appendTo(td);
        td.data('skill', skill);
      }
      i %= WIDTH;
      while (i < WIDTH) {
        $('<td></td>').appendTo(tr);
        i++;
      }
      return this.show();
    };

    SkillsBox.prototype.giveControl = function(resetCursor) {
      var pos;
      if (resetCursor == null) {
        resetCursor = true;
      }
      if (resetCursor) {
        pos = new Position(0, 0);
      } else {
        pos = this.cursorPos;
      }
      this.setCursorPos(pos);
      return this.ui.controlState = new _cs.chapterui.SkillsBox(this.ui, this);
    };

    SkillsBox.prototype.getSkill = function() {
      return this.getCursorCell().data('skill');
    };

    SkillsBox.prototype.getCell = function(pos) {
      var row;
      row = $(this.box.find('tr')[pos.i]);
      return $(row.find('td')[pos.j]);
    };

    SkillsBox.prototype.getCursorCell = function() {
      return this.getCell(this.cursorPos);
    };

    SkillsBox.prototype.setCursorPos = function(cursorPos) {
      this.cursorPos = cursorPos;
      if (this.onCursorMove != null) {
        this.onCursorMove();
      }
      this.box.find('.selected').removeClass('selected');
      this.getCursorCell().addClass('selected');
      return this.updateInfoBox();
    };

    SkillsBox.prototype.updateInfoBox = function() {
      var skl;
      skl = this.getSkill();
      return this.skillInfoBox.init(skl, this.unit.canUseSkill(skl));
    };

    SkillsBox.prototype.show = function() {
      return this.box.css('display', 'block');
    };

    SkillsBox.prototype.hide = function() {
      return this.box.css('display', 'none');
    };

    return SkillsBox;

  })();

  _cs.chapterui.SkillsBox = (function(superClass) {
    extend(SkillsBox, superClass);

    function SkillsBox(ui, boxObj) {
      this.ui = ui;
      this.boxObj = boxObj;
    }

    SkillsBox.prototype.skillAt = function(cp) {
      return this.boxObj.getCell(cp).hasClass('skill');
    };

    SkillsBox.prototype.f = function() {
      return this.boxObj.onF();
    };

    SkillsBox.prototype.d = function() {
      this.boxObj.box.find('.selected').removeClass('selected');
      this.boxObj.skillInfoBox.hide();
      return this.boxObj.onD();
    };

    SkillsBox.prototype.left = function() {
      var cp, cp1, j, k, ref, results;
      cp = this.boxObj.cursorPos;
      if (cp.j > 0) {
        cp1 = new Position(cp.i, cp.j - 1);
        return this.boxObj.setCursorPos(cp1);
      } else {
        results = [];
        for (j = k = ref = WIDTH - 1; ref <= 0 ? k <= 0 : k >= 0; j = ref <= 0 ? ++k : --k) {
          cp1 = new Position(cp.i, j);
          if (this.skillAt(cp1)) {
            this.boxObj.setCursorPos(cp1);
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    SkillsBox.prototype.right = function() {
      var cp, cp1;
      cp = this.boxObj.cursorPos;
      cp1 = new Position(cp.i, cp.j + 1);
      if (!(cp.j + 1 < WIDTH && this.skillAt(cp1))) {
        cp1 = new Position(cp.i, 0);
      }
      return this.boxObj.setCursorPos(cp1);
    };

    SkillsBox.prototype.up = function() {
      var cp, cp1, i, k, ref, results;
      cp = this.boxObj.cursorPos;
      if (cp.i > 0) {
        cp1 = new Position(cp.i - 1, cp.j);
        return this.boxObj.setCursorPos(cp1);
      } else {
        results = [];
        for (i = k = ref = WIDTH - 1; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {
          cp1 = new Position(i, cp.j);
          if (this.skillAt(cp1)) {
            this.boxObj.setCursorPos(cp1);
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    SkillsBox.prototype.down = function() {
      var cp, cp1;
      cp = this.boxObj.cursorPos;
      cp1 = new Position(cp.i + 1, cp.j);
      if (!(cp1.i < HEIGHT && this.skillAt(cp1))) {
        cp1 = new Position(0, cp.j);
      }
      return this.boxObj.setCursorPos(cp1);
    };

    return SkillsBox;

  })(_cs.chapterui.Chapter);

}).call(this);
