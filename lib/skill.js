// Generated by CoffeeScript 1.7.1
(function() {
  var CsDefend, CsSkill,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.skill = {};

  skill.type = {
    NONE: 0
  };

  skill.Skill = (function() {
    function Skill() {
      this.type = skill.type.NONE;
      this.might = null;
      this.mp = 0;
    }

    Skill.prototype.getImagePath = function() {
      return "images/skills/" + this.imageName + ".png";
    };

    Skill.prototype.getMessageEl = function() {
      var img, message, span;
      message = $('<div></div>').addClass('action-message');
      img = $('<img/>').attr('src', this.getImagePath());
      img.appendTo(message);
      span = $('<span></span>').text(this.name + '!');
      span.appendTo(message);
      return message;
    };

    Skill.prototype.getControlState = function(ui, playerTurn) {
      return new this.controlState(ui, playerTurn, this);
    };

    return Skill;

  })();

  CsSkill = (function(_super) {
    __extends(CsSkill, _super);

    function CsSkill(ui, playerTurn, skl) {
      this.ui = ui;
      this.playerTurn = playerTurn;
      this.skl = skl;
    }

    CsSkill.prototype.f = function() {
      this.ui.cursor.visible = false;
      this.ui.unitInfoBox.hide();
      this.ui.terrainBox.hide();
      this.ui.skillInfoBox.hide();
      this.ui.chapter.map.clearOverlay();
      return this.ui.controlState = new ControlState();
    };

    CsSkill.prototype.d = function() {
      return this.playerTurn.handleSkill();
    };

    CsSkill.prototype.skillDone = function() {
      this.ui.unitInfoBox.init(this.playerTurn.selectedUnit, false, true);
      this.ui.controlState = new CsMap(this.ui);
      this.ui.cursor.visible = true;
      this.ui.terrainBox.show();
      this.playerTurn.selectedUnit.setDone();
      return this.playerTurn.selectedUnit = null;
    };

    return CsSkill;

  })(CsMapTarget);

  skill.Defend = (function(_super) {
    __extends(Defend, _super);

    function Defend() {
      Defend.__super__.constructor.call(this);
      this.name = 'Defend';
      this.imageName = 'defend';
      this.desc = 'During the next enemy turn, ' + 'damage received is halved, but the unit cannot counterattack.';
      this.mp = 2;
      this.range = [0];
      this.overlayType = 'AID';
      this.controlState = CsDefend;
    }

    return Defend;

  })(skill.Skill);

  CsDefend = (function(_super) {
    __extends(CsDefend, _super);

    function CsDefend() {
      return CsDefend.__super__.constructor.apply(this, arguments);
    }

    CsDefend.prototype.f = function() {
      var action, afterAction, unit;
      CsDefend.__super__.f.call(this);
      unit = this.playerTurn.selectedUnit;
      afterAction = (function(_this) {
        return function() {
          unit.statuses.push(new _status.Defend());
          return _this.skillDone();
        };
      })(this);
      action = new UnitAction(this.ui, unit);
      return action.doAction(this.skl, afterAction);
    };

    return CsDefend;

  })(CsSkill);

  window._status = {};

  _status.Status = (function() {
    function Status() {}

    Status.prototype.getEl = function() {
      var div, img, span;
      div = $('<div></div>').addClass('status');
      img = $('<img/>').attr('src', this.imagePath);
      span = $('<span></span>').text(this.text);
      div.append(img).append(span);
      return div;
    };

    return Status;

  })();

  _status.Defend = (function(_super) {
    __extends(Defend, _super);

    function Defend() {
      this.text = 'Defend';
      this.imagePath = 'images/skills/defend.png';
      this.turns = 1;
    }

    return Defend;

  })(_status.Status);

}).call(this);
